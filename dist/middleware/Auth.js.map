{"version":3,"sources":["../../server/middleware/Auth.js"],"names":["Auth","checkToken","req","res","next","token","headers","status","send","message","verifyToken","decoded","jwt","verify","process","env","SECRET","text","db","query","userEmail","user","email","error"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,IAAI,GAAG;AACLC,EAAAA,UADK;AAAA;AAAA;AAAA,6CACMC,GADN,EACWC,GADX,EACgBC,IADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHC,cAAAA,KAFG,GAEKH,GAAG,CAACI,OAAJ,CAAY,gBAAZ,CAFL;;AAAA,kBAGJD,KAHI;AAAA;AAAA;AAAA;;AAAA,+CAIAF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eAArB,CAJA;;AAAA;AAAA,+CAMFL,IAAI,EANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAQLM,EAAAA,WARK;AAAA;AAAA;AAAA,8CAQOR,GARP,EAQYC,GARZ,EAQiBC,IARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AASHC,cAAAA,KATG,GASKH,GAAG,CAACI,OAAJ,CAAY,gBAAZ,CATL;AAAA;;AAWP;;;;;;AAMMK,cAAAA,OAjBC,GAiBSC,sBAAIC,MAAJ,CAAWR,KAAX,EAAkBS,OAAO,CAACC,GAAR,CAAYC,MAA9B,CAjBT;AAkBDC,cAAAA,IAlBC,GAkBM,sCAlBN;AAAA;AAAA,qBAmBDC,YAAGC,KAAH,CAASF,IAAT,EAAe,CAACN,OAAO,CAACS,SAAT,CAAf,CAnBC;;AAAA;AAoBPlB,cAAAA,GAAG,CAACmB,IAAJ,GAAW;AAAEC,gBAAAA,KAAK,EAAEX,OAAO,CAACS;AAAjB,eAAX;AApBO,gDAqBAhB,IAAI,EArBJ;;AAAA;AAAA;AAAA;AAAA,gDAuBAD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAAA,OAAO,EAAE,WADiB;AAE1Bc,gBAAAA,KAAK;AAFqB,eAArB,CAvBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAb;eA+BevB,I","sourcesContent":["import jwt from 'jsonwebtoken';\nimport db from '../db';\n\nconst Auth = {\n  async checkToken(req, res, next) {\n    const token = req.headers['x-access-token'];\n    if (!token) {\n      return res.status(401).send({ message: 'No Token Provided' });\n    }\n    return next();\n  },\n  async verifyToken(req, res, next) {\n    const token = req.headers['x-access-token'];\n    try {\n      /**\n       * (Synchronous) If a callback is not supplied,\n       * function acts synchronously. Returns the payload\n       * decoded if the signature is valid and optional\n       * expiration, audience, or issuer are valid. If not, it will throw the error.\n       */\n      const decoded = jwt.verify(token, process.env.SECRET);\n      const text = 'SELECT * FROM users WHERE email = $1';\n      await db.query(text, [decoded.userEmail]);\n      req.user = { email: decoded.userEmail };\n      return next();\n    } catch (error) {\n      return res.status(403).send({\n        message: 'Forbidden',\n        error,\n      });\n    }\n  },\n};\n\nexport default Auth;\n"],"file":"Auth.js"}