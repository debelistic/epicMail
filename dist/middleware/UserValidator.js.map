{"version":3,"sources":["../../server/middleware/UserValidator.js"],"names":["ValidateUserInput","bodyCheck","req","res","next","body","status","send","message","names","firstName","lastName","username","test","password","resetMail","recoveryEmail","loginField","email","loginEmail","loginQuery","toLowerCase","userEmail","db","query","rows","undefined","mesage","error","loginPassword","Helper","comparePassword","checkUser","user","checkRecoveryEmail","checkQuery"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,iBAAiB,GAAG;AAExB;;;;;;AAMMC,EAAAA,SARkB;AAAA;AAAA;AAAA,6CAQRC,GARQ,EAQHC,GARG,EAQEC,IARF;AAAA;AAAA;AAAA;AAAA;AAAA,kBASjBF,GAAG,CAACG,IATa;AAAA;AAAA;AAAA;;AAAA,+CAUbF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAAA,OAAO,EAAE;AADiB,eAArB,CAVa;;AAAA;AAAA,+CAcfJ,IAAI,EAdW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAkBxB;;;;;;AAMMK,EAAAA,KAxBkB;AAAA;AAAA;AAAA,8CAwBZP,GAxBY,EAwBPC,GAxBO,EAwBFC,IAxBE;AAAA;AAAA;AAAA;AAAA;AAAA,oBAyBlB,CAACF,GAAG,CAACG,IAAJ,CAASK,SAAV,IAAuB,CAACR,GAAG,CAACG,IAAJ,CAASM,QAzBf;AAAA;AAAA;AAAA;;AAAA,gDA0BbR,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAAA,OAAO,EAAE;AADiB,eAArB,CA1Ba;;AAAA;AAAA,gDA8BfJ,IAAI,EA9BW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAiCxB;;;;;;AAMMQ,EAAAA,QAvCkB;AAAA;AAAA;AAAA,8CAuCTV,GAvCS,EAuCJC,GAvCI,EAuCCC,IAvCD;AAAA;AAAA;AAAA;AAAA;AAAA,oBAwClB,CAACF,GAAG,CAACG,IAAJ,CAASO,QAAV,IAAsB,CAAC,iBAAiBC,IAAjB,CAAsBX,GAAG,CAACG,IAAJ,CAASO,QAA/B,CAxCL;AAAA;AAAA;AAAA;;AAAA,gDAyCbT,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAAA,OAAO,EAAE;AADiB,eAArB,CAzCa;;AAAA;AAAA,gDA6CfJ,IAAI,EA7CW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAgDxB;;;;;;AAMMU,EAAAA,QAtDkB;AAAA;AAAA;AAAA,8CAsDTZ,GAtDS,EAsDJC,GAtDI,EAsDCC,IAtDD;AAAA;AAAA;AAAA;AAAA;AAAA,oBAuDlB,CAAC,8CAA8CS,IAA9C,CAAmDX,GAAG,CAACG,IAAJ,CAASS,QAA5D,CAAD,IAA0E,CAACZ,GAAG,CAACG,IAAJ,CAASS,QAvDlE;AAAA;AAAA;AAAA;;AAAA,gDAwDbX,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAAA,OAAO,EAAE;AADiB,eAArB,CAxDa;;AAAA;AAAA,gDA4DfJ,IAAI,EA5DW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA+DxB;;;;;;AAMMW,EAAAA,SArEkB;AAAA;AAAA;AAAA,8CAqERb,GArEQ,EAqEHC,GArEG,EAqEEC,IArEF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAsElB,CAACF,GAAG,CAACG,IAAJ,CAASW,aAAV,IAA2B,CAAC,wIAAwIH,IAAxI,CAA6IX,GAAG,CAACG,IAAJ,CAASW,aAAtJ,CAtEV;AAAA;AAAA;AAAA;;AAAA,gDAuEbb,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAAA,OAAO,EAAE;AADiB,eAArB,CAvEa;;AAAA;AAAA,gDA2EfJ,IAAI,EA3EW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA8ExB;;;;;;AAMMa,EAAAA,UApFkB;AAAA;AAAA;AAAA,8CAoFPf,GApFO,EAoFFC,GApFE,EAoFGC,IApFH;AAAA;AAAA;AAAA;AAAA;AAAA,oBAqFlB,CAACF,GAAG,CAACG,IAAJ,CAASa,KAAV,IAAmB,CAAChB,GAAG,CAACG,IAAJ,CAASS,QArFX;AAAA;AAAA;AAAA;;AAAA,gDAsFbX,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAAA,OAAO,EAAE;AADiB,eAArB,CAtFa;;AAAA;AAAA,gDA0FfJ,IAAI,EA1FW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA6FxB;;;;;;AAMMe,EAAAA,UAnGkB;AAAA;AAAA;AAAA,8CAmGPjB,GAnGO,EAmGFC,GAnGE,EAmGGC,IAnGH;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAqGdgB,cAAAA,UArGc,GAqGD,sCArGC;AAAA;AAAA,+BAsGOlB,GAAG,CAACG,IAAJ,CAASa,KAAT,CAAeG,WAAf,EAtGP;;AAAA;AAsGdC,cAAAA,SAtGc;AAAA;AAAA,qBAuGGC,YAAGC,KAAH,CAASJ,UAAT,EAAqB,CAACE,SAAD,CAArB,CAvGH;;AAAA;AAAA;AAuGZG,cAAAA,IAvGY,QAuGZA,IAvGY;;AAAA,oBAwGhBA,IAAI,CAAC,CAAD,CAAJ,KAAYC,SAxGI;AAAA;AAAA;AAAA;;AAAA,gDAyGXvB,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BoB,gBAAAA,MAAM,EAAE;AADkB,eAArB,CAzGW;;AAAA;AAAA,oBA6GhBF,IAAI,CAAC,CAAD,CAAJ,CAAQP,KAAR,KAAkBI,SA7GF;AAAA;AAAA;AAAA;;AAAA,gDA8GXnB,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BoB,gBAAAA,MAAM,EAAE;AADkB,eAArB,CA9GW;;AAAA;AAAA,gDAkHbvB,IAAI,EAlHS;;AAAA;AAAA;AAAA;AAAA,gDAoHbD,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAAA,OAAO,EAAE,eADiB;AAE1BoB,gBAAAA,KAAK;AAFqB,eAArB,CApHa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA2HxB;;;;;;AAMMC,EAAAA,aAjIkB;AAAA;AAAA;AAAA,8CAiIJ3B,GAjII,EAiICC,GAjID,EAiIMC,IAjIN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAkIhBgB,cAAAA,UAlIgB,GAkIH,sCAlIG;AAAA;AAAA,qBAmIElB,GAAG,CAACG,IAAJ,CAASa,KAAT,CAAeG,WAAf,EAnIF;;AAAA;AAmIhBC,cAAAA,SAnIgB;AAAA;AAAA,qBAoICC,YAAGC,KAAH,CAASJ,UAAT,EAAqB,CAACE,SAAD,CAArB,CApID;;AAAA;AAAA;AAoIdG,cAAAA,IApIc,SAoIdA,IApIc;;AAAA,kBAqIjBK,gBAAOC,eAAP,CAAuB7B,GAAG,CAACG,IAAJ,CAASS,QAAhC,EAA0CW,IAAI,CAAC,CAAD,CAAJ,CAAQX,QAAlD,CArIiB;AAAA;AAAA;AAAA;;AAAA,gDAsIbX,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAAA,OAAO,EAAE;AADiB,eAArB,CAtIa;;AAAA;AAAA,gDA0IfJ,IAAI,EA1IW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA6IxB;;;;;;AAMM4B,EAAAA,SAnJkB;AAAA;AAAA;AAAA,8CAmJR9B,GAnJQ,EAmJHC,GAnJG,EAmJEC,IAnJF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAoJjBF,GAAG,CAAC+B,IApJa;AAAA;AAAA;AAAA;;AAAA,gDAqJb9B,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAAA,OAAO,EAAE;AADiB,eAArB,CArJa;;AAAA;AAAA,gDAyJfJ,IAAI,EAzJW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA4JlB8B,EAAAA,kBA5JkB;AAAA;AAAA;AAAA,+CA4JChC,GA5JD,EA4JMC,GA5JN,EA4JWC,IA5JX;AAAA;;AAAA;AAAA;AAAA;AAAA;AA6JhB+B,cAAAA,UA7JgB,GA6JH,8CA7JG;AAAA;AAAA,qBA8JCZ,YAAGC,KAAH,CAASW,UAAT,EAAqB,CAACjC,GAAG,CAACG,IAAJ,CAASW,aAAV,CAArB,CA9JD;;AAAA;AAAA;AA8JdS,cAAAA,IA9Jc,SA8JdA,IA9Jc;AA+JhBjB,cAAAA,OA/JgB,GA+JN,4DA/JM;;AAAA,mBAgKlBiB,IAAI,CAAC,CAAD,CAhKc;AAAA;AAAA;AAAA;;AAAA,iDAiKbtB,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAAA,OAAO,EAAPA;AAD0B,eAArB,CAjKa;;AAAA;AAAA,iDAqKfJ,IAAI,EArKW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAA1B;eAyKeJ,iB","sourcesContent":["import db from '../db';\nimport Helper from './Helper';\n\nconst ValidateUserInput = {\n\n  /**\n   * Check if request object is empty\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   */\n  async bodyCheck(req, res, next) {\n    if (!req.body) {\n      return res.status(400).send({\n        message: 'Enter details',\n      });\n    }\n    return next();\n  },\n\n\n  /**\n   * Validate Name fields\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   */\n  async names(req, res, next) {\n    if (!req.body.firstName || !req.body.lastName) {\n      return res.status(400).send({\n        message: 'Enter your first name and last name ',\n      });\n    }\n    return next();\n  },\n\n  /**\n   * Validate Username\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   */\n  async username(req, res, next) {\n    if (!req.body.username || !/^[a-z\\d]{8,}$/i.test(req.body.username)) {\n      return res.status(400).send({\n        message: 'Username should be at least 8 characters long',\n      });\n    }\n    return next();\n  },\n\n  /**\n   * Validate Password\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   */\n  async password(req, res, next) {\n    if (!/^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9]).{6,}$/.test(req.body.password) || !req.body.password) {\n      return res.status(400).send({\n        message: 'Password should contain at least a lower and upper case, a digit',\n      });\n    }\n    return next();\n  },\n\n  /**\n   * Check for recovery email address\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   */\n  async resetMail(req, res, next) {\n    if (!req.body.recoveryEmail || !/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/.test(req.body.recoveryEmail)) {\n      return res.status(400).send({\n        message: 'Enter a valid email addresss for recovery.',\n      });\n    }\n    return next();\n  },\n\n  /**\n   * Validate Login Field\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   */\n  async loginField(req, res, next) {\n    if (!req.body.email || !req.body.password) {\n      return res.status(401).send({\n        message: 'Enter email and password',\n      });\n    }\n    return next();\n  },\n\n  /**\n   * Login email handler\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   */\n  async loginEmail(req, res, next) {\n    try {\n      const loginQuery = 'SELECT * FROM users WHERE email = $1';\n      const userEmail = await `${req.body.email.toLowerCase()}`;\n      const { rows } = await db.query(loginQuery, [userEmail]);\n      if (rows[0] === undefined) {\n        return res.status(403).send({\n          mesage: 'You are not a registered',\n        });\n      }\n      if (rows[0].email !== userEmail) {\n        return res.status(401).send({\n          mesage: 'You are not a member of this group',\n        });\n      }\n      return next();\n    } catch (error) {\n      return res.status(400).send({\n        message: 'Invaild email',\n        error,\n      });\n    }\n  },\n\n  /**\n   * Login password handler\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   */\n  async loginPassword(req, res, next) {\n    const loginQuery = 'SELECT * FROM users WHERE email = $1';\n    const userEmail = await req.body.email.toLowerCase();\n    const { rows } = await db.query(loginQuery, [userEmail]);\n    if (!Helper.comparePassword(req.body.password, rows[0].password)) {\n      return res.status(401).send({\n        message: 'Invalid Passowrd',\n      });\n    }\n    return next();\n  },\n\n  /**\n   * Check is User is logged in\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   */\n  async checkUser(req, res, next) {\n    if (!req.user) {\n      return res.status(400).send({\n        message: 'Login to your account',\n      });\n    }\n    return next();\n  },\n\n  async checkRecoveryEmail(req, res, next) {\n    const checkQuery = 'SELECT * FROM users WHERE recoveryemail = $1';\n    const { rows } = await db.query(checkQuery, [req.body.recoveryEmail]);\n    const message = 'The recovery email you entered is associated to an account';\n    if (rows[0]) {\n      return res.status(400).send({\n        message,\n      });\n    }\n    return next();\n  },\n};\n\nexport default ValidateUserInput;\n"],"file":"UserValidator.js"}