{"version":3,"sources":["../../server/middleware/UserValidator.js"],"names":["ValidateUserInput","signUpField","req","res","next","body","status","send","data","message","firstName","lastName","test","password","username","securityKey","loginField","email","resetPasswordField"],"mappings":"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","sourcesContent":["const ValidateUserInput = {\n  async signUpField(req, res, next) {\n    try {\n      if (!req.body) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'Enter details',\n          }],\n        });\n      }\n      if (!req.body.firstName) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'Enter your first name',\n          }],\n        });\n      }\n      if (!req.body.lastName) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'Enter your last name',\n          }],\n        });\n      }\n      if (!/^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[$@#&!]).{6,}$/.test(req.body.password)) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'Password should contain at least a lower and upper case, a digit and any of $,@,#,&,!',\n          }],\n        });\n      }\n      if (!req.body.username) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'Enter your username',\n          }],\n        });\n      }\n      if (!/^[a-z\\d]{8,}$/i.test(req.body.username)) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'username should be at least 8 characters long',\n          }],\n        });\n      }\n      if (!req.body.password) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'Enter password',\n          }],\n        });\n      }\n      if (!req.body.securityKey) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'enter security password to reset your password',\n          }],\n        });\n      }\n      return next();\n    } catch (error) {\n      return next(error);\n    }\n  },\n  async loginField(req, res, next) {\n    try {\n      if (!req.body.email) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'Enter your email address',\n          }],\n        });\n      }\n      if (!req.body.password) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'Enter your password',\n          }],\n        });\n      }\n      return next();\n    } catch (error) {\n      return next(error);\n    }\n  },\n\n\n  async resetPasswordField(req, res, next) {\n    try {\n      if (!req.body.email) {\n        return res.send({\n          status: 400,\n          data: [{\n            message: 'Enter your email address',\n          }],\n        });\n      }\n      if (!req.body.securityKey) {\n        return res.send({\n          status: 400,\n          data: [{\n            message: 'Enter your security key',\n          }],\n        });\n      }\n      if (!req.body.password) {\n        return res.send({\n          status: 400,\n          data: [{\n            message: 'Enter your a new password',\n          }],\n        });\n      }\n      return next();\n    } catch (error) {\n      return next(error);\n    }\n  },\n};\n\nexport default ValidateUserInput;\n"],"file":"UserValidator.js"}