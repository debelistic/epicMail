{"version":3,"sources":["../../server/middleware/TokenHelper.js"],"names":["CheckToken","checkIfExpired","req","res","next","token","params","jwt","verify","process","env","SECRET","status","send","message","error"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA;AAEA,IAAMA,UAAU,GAAG;AACXC,EAAAA,cADW;AAAA;AAAA;AAAA,6CACIC,GADJ,EACSC,GADT,EACcC,IADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGLC,cAAAA,KAHK,GAGKH,GAAG,CAACI,MAHT,CAGLD,KAHK;AAAA;AAAA,qBAIPE,sBAAIC,MAAJ,CAAWH,KAAX,EAAkBI,OAAO,CAACC,GAAR,CAAYC,MAA9B,CAJO;;AAAA;AAAA,+CAKNP,IAAI,EALE;;AAAA;AAAA;AAAA;AAAA,+CAOND,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,gBAAAA,OAAO,EAAE,kBADiB;AAE1BC,gBAAAA,KAAK;AAFqB,eAArB,CAPM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAnB;eAeef,U","sourcesContent":["import jwt from 'jsonwebtoken';\nimport { config } from 'dotenv';\n\nconfig();\n\nconst CheckToken = {\n  async checkIfExpired(req, res, next) {\n    try {\n      const { token } = req.params;\n      await jwt.verify(token, process.env.SECRET);\n      return next();\n    } catch (error) {\n      return res.status(403).send({\n        message: 'Token is expired',\n        error,\n      });\n    }\n  },\n};\n\nexport default CheckToken;\n"],"file":"TokenHelper.js"}