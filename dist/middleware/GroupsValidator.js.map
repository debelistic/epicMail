{"version":3,"sources":["../../server/middleware/GroupsValidator.js"],"names":["ValidateGroupsInput","addGroup","req","res","body","name","send","status","message","description","user","email","routine","error","verifyMembermail","checkMemberEmailQuery","db","query","membermail","rows","data","addAdmin","addGroupAdminQuery","adminvalues","params","id"],"mappings":"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","file":"GroupsValidator.js","sourcesContent":["/* eslint-disable consistent-return */\nimport db from '../db';\n\nconst ValidateGroupsInput = {\n  async addGroup(req, res) {\n    try {\n      if (!req.body.name) {\n        return res.send({\n          status: 400,\n          message: 'Enter name',\n        });\n      }\n      if (!req.body.description) {\n        return res.send({\n          status: 400,\n          message: 'Enter description',\n        });\n      }\n      if (!req.user.email) {\n        return res.send({\n          status: 403,\n          message: 'Only members can create groups',\n        });\n      }\n    } catch (error) {\n      if (error.routine === '_bt_check_unique') {\n        return res.send({\n          status: 400,\n          message: 'Group already exist',\n        });\n      }\n      return res.send({\n        status: 400,\n        error,\n      });\n    }\n  },\n  async verifyMembermail(req, res) {\n    try {\n      const checkMemberEmailQuery = 'SELECT * FROM users WHERE $1=email';\n      const { rows } = await db.query(checkMemberEmailQuery, [req.body.membermail]);\n      if (!rows[0]) {\n        return res.send({\n          status: 400,\n          data: [{\n            message: 'Receiver email does not exist',\n          }],\n        });\n      }\n      if (!req.user.email) {\n        return res.status(403).send({\n          status: 403,\n          message: 'only registered users can make groups',\n        });\n      }\n      if (!req.body.name || !req.body.membermail) {\n        return res.status(400).send({\n          status: 400,\n          message: 'enter a group name and member mail',\n        });\n      }\n    } catch (error) {\n      if (error.routine === '_bt_check_unique') {\n        return res.status(400).send({\n          status: 400,\n          message: 'Member Eixts Already',\n        });\n      }\n      return res.send({\n        error,\n      });\n    }\n  },\n  async addAdmin(req, res) {\n    try {\n      const addGroupAdminQuery = `INSERT INTO\n      groupmembers(groupId, groupName, memberId, role)\n      VALUES($1, $2, $3, $4) RETURNING *`;\n      const adminvalues = [\n        req.params.id,\n        req.body.name,\n        req.user.email,\n        'admin',\n      ];\n      const { rows } = await db.query(addGroupAdminQuery, adminvalues);\n      return rows[0];\n    } catch (error) {\n      return res.send({\n        error,\n      });\n    }\n  },\n};\n\nexport default ValidateGroupsInput;\n"]}