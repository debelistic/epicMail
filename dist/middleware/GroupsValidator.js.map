{"version":3,"sources":["../../server/middleware/GroupsValidator.js"],"names":["ValidateGroupsInput","addGroup","req","res","body","name","send","status","message","description","user","email","routine","error","verifyMembermail","checkMemberEmailQuery","db","query","membermail","rows","data","addAdmin","addGroupAdminQuery","adminvalues","params","id"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return */\r\nimport db from '../db';\r\n\r\nconst ValidateGroupsInput = {\r\n  async addGroup(req, res) {\r\n    try {\r\n      if (!req.body.name) {\r\n        return res.send({\r\n          status: 400,\r\n          message: 'Enter name',\r\n        });\r\n      }\r\n      if (!req.body.description) {\r\n        return res.send({\r\n          status: 400,\r\n          message: 'Enter description',\r\n        });\r\n      }\r\n      if (!req.user.email) {\r\n        return res.send({\r\n          status: 403,\r\n          message: 'Only members can create groups',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (error.routine === '_bt_check_unique') {\r\n        return res.send({\r\n          status: 400,\r\n          message: 'Group already exist',\r\n        });\r\n      }\r\n      return res.send({\r\n        status: 400,\r\n        error,\r\n      });\r\n    }\r\n  },\r\n  async verifyMembermail(req, res) {\r\n    try {\r\n      const checkMemberEmailQuery = 'SELECT * FROM users WHERE $1=email';\r\n      const { rows } = await db.query(checkMemberEmailQuery, [req.body.membermail]);\r\n      if (!rows[0]) {\r\n        return res.send({\r\n          status: 400,\r\n          data: [{\r\n            message: 'Receiver email does not exist',\r\n          }],\r\n        });\r\n      }\r\n      if (!req.user.email) {\r\n        return res.status(403).send({\r\n          status: 403,\r\n          message: 'only registered users can make groups',\r\n        });\r\n      }\r\n      if (!req.body.name || !req.body.membermail) {\r\n        return res.status(400).send({\r\n          status: 400,\r\n          message: 'enter a group name and member mail',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (error.routine === '_bt_check_unique') {\r\n        return res.status(400).send({\r\n          status: 400,\r\n          message: 'Member Eixts Already',\r\n        });\r\n      }\r\n      return res.send({\r\n        error,\r\n      });\r\n    }\r\n  },\r\n  async addAdmin(req, res) {\r\n    try {\r\n      const addGroupAdminQuery = `INSERT INTO\r\n      groupmembers(groupId, groupName, memberId, role)\r\n      VALUES($1, $2, $3, $4) RETURNING *`;\r\n      const adminvalues = [\r\n        req.params.id,\r\n        req.body.name,\r\n        req.user.email,\r\n        'admin',\r\n      ];\r\n      const { rows } = await db.query(addGroupAdminQuery, adminvalues);\r\n      return rows[0];\r\n    } catch (error) {\r\n      return res.send({\r\n        error,\r\n      });\r\n    }\r\n  },\r\n};\r\n\r\nexport default ValidateGroupsInput;\r\n"],"file":"GroupsValidator.js"}