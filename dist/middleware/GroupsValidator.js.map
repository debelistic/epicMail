{"version":3,"sources":["../../server/middleware/GroupsValidator.js"],"names":["ValidateGroupsInput","groupForm","req","res","next","body","name","description","status","send","message","addMember","membermail","verifyMail","checkMemberEmailQuery","db","query","params","id","user","email","rows","undefined","mesage","memberid","error","checkAdmin","verifyAdminQuery","checkMessageInput","checkNewName","newName","data"],"mappings":"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","sourcesContent":["import db from '../db';\n\nconst ValidateGroupsInput = {\n  /**\n   * Validate create group form\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   */\n  async groupForm(req, res, next) {\n    if (!req.body.name || !req.body.description) {\n      return res.status(400).send({\n        message: 'If you are a registered user enter group name and description or Signup',\n      });\n    }\n    return next();\n  },\n\n  /**\n   * Validate add member form\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   */\n  async addMember(req, res, next) {\n    if (!req.body.name || !req.body.membermail) {\n      return res.status(400).send({\n        message: 'Enter a group name and member mail',\n      });\n    }\n    return next();\n  },\n\n  /**\n   * Verify User Email\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   */\n  async verifyMail(req, res, next) {\n    try {\n      const checkMemberEmailQuery = 'SELECT * FROM groupmembers WHERE $1=groupId AND $2=memberId';\n      const { rows } = await db.query(checkMemberEmailQuery, [req.params.id, req.user.email]);\n      if (rows[0] === undefined) {\n        return res.status(401).send({\n          mesage: 'You are not a member',\n        });\n      }\n      if (rows[0].memberid !== req.user.email) {\n        return res.status(401).send({\n          mesage: 'You are not a member of this group',\n        });\n      }\n      return next();\n    } catch (error) {\n      return res.status(400).send({\n        error,\n      });\n    }\n  },\n\n  async checkAdmin(req, res, next) {\n    try {\n      const verifyAdminQuery = 'SELECT * FROM groupmembers WHERE memberId = $1 AND groupId = $2 AND role = $3';\n      const { rows } = await db.query(verifyAdminQuery, [req.user.email, req.params.id, 'admin']);\n      if (rows[0] === undefined) {\n        return res.status(403).send({\n          message: 'Admins Only.',\n        });\n      }\n      if (rows[0].memberid !== req.user.email) {\n        return res.status(403).send({\n          message: 'Admins Only.',\n        });\n      }\n\n      return next();\n    } catch (error) {\n      return res.status(400).send({\n        error,\n      });\n    }\n  },\n\n  async checkMessageInput(req, res, next) {\n    if (!req.body.message || !req.user) {\n      return res.status(400).send({ message: 'enter a text' });\n    }\n    return next();\n  },\n\n  async checkNewName(req, res, next) {\n    if (!req.body.newName) {\n      return res.status(400).send({\n        status: 400,\n        data: [\n          {\n            message: 'enter new name',\n          },\n        ],\n      });\n    }\n    return next();\n  },\n};\n\nexport default ValidateGroupsInput;\n"],"file":"GroupsValidator.js"}