{"version":3,"sources":["../../server/controllers/UserController.js"],"names":["UserController","createUser","req","res","body","firstName","lastName","email","password","status","send","message","securityQuestion","test","hashPassword","Helper","hashSecurity","createUserQuery","values","userImage","Date","db","query","rows","token","generateToken","data","routine","login","loginQuery","comparePassword","error","resetPassword","getUserSecurityQuestion","security","securityquestion","answer","newPassword","updateUserPassword"],"mappings":"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","file":"UserController.js","sourcesContent":["import db from '../db';\nimport Helper from '../middleware/Helper';\n\nconst UserController = {\n  /**\n     * create user\n     */\n  async createUser(req, res) {\n    try {\n      if (!req.body.firstName || !req.body.lastName || !req.body.email || !req.body.password) {\n        return res.status(400).send({\n          status: 400,\n          message: 'Enter your first name, last name and password',\n        });\n      }\n      if (!req.body.securityQuestion) {\n        return res.status(400).send({\n          status: 400,\n          message: 'Enter your enter a security to question to keep your account safe',\n        });\n      }\n      if (!/^[a-z\\d]{5,}$/i.test(req.body.email)) {\n        return res.status(400).send({ message: 'Set a valid email address' });\n      }\n      if (!/^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[$@#&!]).{6,}$/.test(req.body.password)) {\n        return res.status(400).send({\n          status: 400,\n          message: 'Password should contain at least a lower and upper case, a digit and special character',\n        });\n      }\n\n      const hashPassword = Helper.hashPassword(req.body.password);\n      const hashSecurity = Helper.hashPassword(req.body.securityQuestion);\n\n      const createUserQuery = `INSERT INTO\n        users(email, firstName, lastName, password, userImage, securityQuestion, createdOn, modifiedOn)\n        VALUES($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *`;\n      const values = [\n        req.body.email,\n        req.body.firstName,\n        req.body.lastName,\n        hashPassword,\n        req.body.userImage,\n        hashSecurity,\n        new Date(),\n        new Date(),\n      ];\n      const { rows } = await db.query(createUserQuery, values);\n      const token = Helper.generateToken(rows[0].email);\n\n      return res.status(201).send({\n        status: 201,\n        data: [\n          token,\n          `New user created, your email is ${rows[0].email}@epicmail`,\n        ],\n      });\n    } catch (error) {\n      if (error.routine === '_bt_check_unique') {\n        return res.status(400).send({ message: 'User email exists already' });\n      }\n      return res.status(400).send(error);\n    }\n  },\n\n  /**\n   * user login\n   */\n  async login(req, res) {\n    try {\n      if (!req.body.email || !req.body.password) {\n        return res.status(400).send({ message: 'Some values are missing' });\n      }\n      if (!/^[a-z\\d]{5,}$/i.test(req.body.email)) {\n        return res.status(400).send({ message: 'Email not valid' });\n      }\n      const loginQuery = 'SELECT * FROM users WHERE email = $1';\n      const { rows } = await db.query(loginQuery, [req.body.email]);\n      if (!rows[0]) {\n        return res.status(400).send({ message: 'Invalid login details' });\n      }\n      if (!Helper.comparePassword(req.body.password, rows[0].password)) {\n        return res.status(400).send({ message: 'Invalid password' });\n      }\n      const token = Helper.generateToken(rows[0].email);\n      return res.status(200).send({ token });\n    } catch (error) {\n      return res.status(400).send({ error });\n    }\n  },\n\n  /**\n   * users can reset password using their security question\n   * @param {object} req\n   * @param {object} res\n   */\n  async resetPassword(req, res) {\n    try {\n      if (!req.body.securityQuestion || !req.body.password || !req.body.email) {\n        return res.status(400).send({ message: 'A field or more is empty' });\n      }\n      const getUserSecurityQuestion = 'SELECT * FROM users WHERE $1 = email';\n      const values = [\n        req.body.email,\n      ];\n      const { rows } = await db.query(getUserSecurityQuestion, values);\n      if (!rows) {\n        return res.status(400).send({ message: 'User not found' });\n      }\n\n      const security = rows[0].securityquestion;\n      const answer = req.body.securityQuestion;\n\n      if (!Helper.comparePassword(answer, security)) {\n        return res.status(400).send({ message: 'Your answer is incorrect' });\n      }\n\n      const newPassword = Helper.hashPassword(req.body.password);\n      const updateUserPassword = 'UPDATE users SET password=$1 WHERE $2 = email RETURNING *';\n      await db.query(updateUserPassword, [newPassword, req.body.email]);\n      return res.status(201).send({ message: 'Your password has been successfully changed' });\n    } catch (error) {\n      return res.status(400).send({ error });\n    }\n  },\n};\n\nexport default UserController;\n"]}