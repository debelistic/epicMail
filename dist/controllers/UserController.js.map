{"version":3,"sources":["../../server/controllers/UserController.js"],"names":["createUserQuery","loginQuery","retreiveQuery","UserController","createUser","req","res","recoveryEmail","body","toLowerCase","hashPassword","Helper","password","emailAddress","username","content","file","uploader","upload","image","values","firstName","lastName","url","Date","db","query","rows","token","generateToken","email","status","send","data","userimage","message","login","userEmail","messgae","forgetpass","baseUrl","host","headers","uri","jwt","sign","process","env","SECRET","expiresIn","Transporter","sendMail","resetpass","params","verify","hashNewPassword","firstname"],"mappings":"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","sourcesContent":["import '@babel/polyfill';\nimport jwt from 'jsonwebtoken';\nimport { config } from 'dotenv';\nimport { dataUri } from '../middleware/multer';\nimport { uploader, cloudinaryConfig } from '../config/cloudinaryConfig';\nimport { Transporter, MailOptions } from '../config/nodemailerConfig';\nimport db from '../db';\nimport Helper from '../middleware/Helper';\n\nconfig();\ncloudinaryConfig();\n\n/** Queries */\nconst createUserQuery = `INSERT INTO\n        users(email, firstName, lastName, userImage, password, recoveryEmail, createdOn, modifiedOn)\n        VALUES($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *`;\n\nconst loginQuery = 'SELECT * FROM users WHERE email = $1';\nconst retreiveQuery = 'UPDATE users SET password=$1 WHERE recoveryEmail= $2 RETURNING *';\n/** End of Queries */\n\nconst UserController = {\n  /**\n   * Create user controller\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   * @returns {object} user\n   */\n  async createUser(req, res) {\n    try {\n      const recoveryEmail = req.body.recoveryEmail.toLowerCase();\n      const hashPassword = Helper.hashPassword(req.body.password);\n      const emailAddress = `${req.body.username.toLowerCase()}@epicmail.com`;\n\n      const file = await dataUri(req).content;\n      const image = await uploader.upload(file);\n\n      const values = [emailAddress, req.body.firstName,\n        req.body.lastName, image.url, hashPassword, recoveryEmail, new Date(), new Date()];\n      const { rows } = await db.query(createUserQuery, values);\n      const token = Helper.generateToken(rows[0].email);\n\n      return res.status(201).send({\n        status: 201,\n        data: [{\n          token,\n          emailAddress: `Your epicmail address is ${rows[0].email}`,\n          image: rows[0].userimage,\n        }],\n      });\n    } catch (error) {\n      return res.status(500).send({\n        message: error,\n      });\n    }\n  },\n\n  /**\n   * Login controller\n   * @param {object} req\n   * @param {object} res\n   * @param {object} next\n   * @returns {object} user\n   */\n  async login(req, res) {\n    try {\n      const userEmail = await req.body.email.toLowerCase();\n      const { rows } = await db.query(loginQuery, [userEmail]);\n      const token = Helper.generateToken(rows[0].email);\n      return res.status(200).send({\n        status: 200,\n        data: [{\n          token,\n          message: `Loggedin as ${rows[0].email}`,\n          image: rows[0].userimage,\n        }],\n      });\n    } catch (error) {\n      return res.status(500).send({\n        messgae: error,\n      });\n    }\n  },\n\n  /**\n   * user enter recovery email to get password reset link\n   * @param {object} req\n   * @param {object} res\n   */\n  async forgetpass(req, res) {\n    try {\n      const { baseUrl } = req;\n      const { recoveryEmail } = req.body;\n      const { host } = req.headers;\n      const uri = host + baseUrl;\n      const token = jwt.sign({\n        recoveryEmail,\n      },\n      process.env.SECRET, { expiresIn: '20m' });\n\n      const message = await MailOptions(recoveryEmail, uri, token);\n      await Transporter.sendMail(message);\n      return res.status(200).send({\n        status: 200,\n        data: [{\n          message: 'Your password reset link has been sent to your mail',\n        }],\n      });\n    } catch (error) {\n      return res.status(500).send({\n        message: error,\n      });\n    }\n  },\n\n  /**\n   * users can reset password the link received\n   * @param {object} req\n   * @param {object} res\n   */\n  async resetpass(req, res) {\n    try {\n      const { password } = req.body;\n      const { token } = req.params;\n      const { recoveryEmail } = await jwt.verify(token, process.env.SECRET);\n      const hashNewPassword = Helper.hashPassword(password.toLowerCase());\n\n      const { rows } = await db.query(retreiveQuery, [hashNewPassword, recoveryEmail]);\n      return res.status(201).send({\n        status: 201,\n        data: [{\n          message: `${rows[0].firstname} You have successfully changed your password`,\n        }],\n      });\n    } catch (error) {\n      return res.status(500).send({\n        message: error,\n      });\n    }\n  },\n};\n\nexport default UserController;\n"],"file":"UserController.js"}