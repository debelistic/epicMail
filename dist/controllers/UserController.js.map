{"version":3,"sources":["../../server/controllers/UserController.js"],"names":["UserController","createUser","req","res","next","securityKey","body","toLowerCase","hashPassword","Helper","password","hashSecurity","emailAddress","username","createUserQuery","values","firstName","lastName","Date","console","log","email","key","db","query","rows","token","generateToken","status","send","data","message","routine","login","loginQuery","userEmail","comparePassword","resetPassword","getUserSecurityQuestion","security","securitykey","answer","toLocaleLowerCase","newPassword","updateUserPassword"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,cAAc,GAAG;AACrB;;;AAGMC,EAAAA,UAJe;AAAA;AAAA;AAAA,6CAIJC,GAJI,EAICC,GAJD,EAIMC,IAJN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMXC,cAAAA,WANW,GAMGH,GAAG,CAACI,IAAJ,CAASD,WAAT,CAAqBE,WAArB,EANH;AAOXC,cAAAA,YAPW,GAOIC,gBAAOD,YAAP,CAAoBN,GAAG,CAACI,IAAJ,CAASI,QAA7B,CAPJ;AAQXC,cAAAA,YARW,GAQIF,gBAAOD,YAAP,CAAoBH,WAApB,CARJ;AASXO,cAAAA,YATW,aASOV,GAAG,CAACI,IAAJ,CAASO,QAAT,CAAkBN,WAAlB,EATP;AAWXO,cAAAA,eAXW;AAcXC,cAAAA,MAdW,GAcF,CACbH,YADa,EAEbV,GAAG,CAACI,IAAJ,CAASU,SAFI,EAGbd,GAAG,CAACI,IAAJ,CAASW,QAHI,EAIbT,YAJa,EAKbG,YALa,EAMb,IAAIO,IAAJ,EANa,EAOb,IAAIA,IAAJ,EAPa,CAdE;AAuBjBC,cAAAA,OAAO,CAACC,GAAR,CACE;AACEC,gBAAAA,KAAK,EAAET,YADT;AAEEU,gBAAAA,GAAG,EAAEjB;AAFP,eADF;AAvBiB;AAAA,qBA6BMkB,YAAGC,KAAH,CAASV,eAAT,EAA0BC,MAA1B,CA7BN;;AAAA;AAAA;AA6BTU,cAAAA,IA7BS,QA6BTA,IA7BS;AA8BXC,cAAAA,KA9BW,GA8BHjB,gBAAOkB,aAAP,CAAqBF,IAAI,CAAC,CAAD,CAAJ,CAAQJ,KAA7B,CA9BG;AAAA,+CAgCVlB,GAAG,CAACyB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAAA,MAAM,EAAE,GADkB;AAE1BE,gBAAAA,IAAI,EAAE,CAAC;AACLJ,kBAAAA,KAAK,EAALA,KADK;AAELK,kBAAAA,OAAO,EAAE,+BAFJ;AAGLV,kBAAAA,KAAK,qCAA8BT,YAA9B;AAHA,iBAAD;AAFoB,eAArB,CAhCU;;AAAA;AAAA;AAAA;;AAAA,oBAyCb,YAAMoB,OAAN,KAAkB,kBAzCL;AAAA;AAAA;AAAA;;AAAA,+CA0CR5B,IAAI,CAAC,qBAAD,CA1CI;;AAAA;AAAA,+CA4CVA,IAAI,aA5CM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAgDrB;;;AAGM6B,EAAAA,KAnDe;AAAA;AAAA;AAAA,8CAmDT/B,GAnDS,EAmDJC,GAnDI,EAmDCC,IAnDD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAqDX8B,cAAAA,UArDW,GAqDE,sCArDF;AAAA;AAAA,qBAsDOhC,GAAG,CAACI,IAAJ,CAASe,KAtDhB;;AAAA;AAsDXc,cAAAA,SAtDW;AAAA;AAAA,qBAuDMZ,YAAGC,KAAH,CAASU,UAAT,EAAqB,CAACC,SAAD,CAArB,CAvDN;;AAAA;AAAA;AAuDTV,cAAAA,IAvDS,SAuDTA,IAvDS;;AAAA,kBAwDZA,IAAI,CAAC,CAAD,CAxDQ;AAAA;AAAA;AAAA;;AAAA,gDAyDRtB,GAAG,CAACyB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAAA,MAAM,EAAE,GADkB;AAE1BE,gBAAAA,IAAI,EAAE,CAAC;AACLC,kBAAAA,OAAO,EAAE;AADJ,iBAAD;AAFoB,eAArB,CAzDQ;;AAAA;AAAA,kBAgEZtB,gBAAO2B,eAAP,CAAuBlC,GAAG,CAACI,IAAJ,CAASI,QAAhC,EAA0Ce,IAAI,CAAC,CAAD,CAAJ,CAAQf,QAAlD,CAhEY;AAAA;AAAA;AAAA;;AAAA,gDAiERP,GAAG,CAACyB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAArB,CAjEQ;;AAAA;AAmEXL,cAAAA,KAnEW,GAmEHjB,gBAAOkB,aAAP,CAAqBF,IAAI,CAAC,CAAD,CAAJ,CAAQJ,KAA7B,CAnEG;AAAA,gDAoEVlB,GAAG,CAACyB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAAA,MAAM,EAAE,GADkB;AAE1BE,gBAAAA,IAAI,EAAE,CAAC;AACLJ,kBAAAA,KAAK,EAALA,KADK;AAELK,kBAAAA,OAAO,wBAAiBN,IAAI,CAAC,CAAD,CAAJ,CAAQJ,KAAzB;AAFF,iBAAD;AAFoB,eAArB,CApEU;;AAAA;AAAA;AAAA;AAAA,gDA4EVjB,IAAI,cA5EM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAgFrB;;;;;AAKMiC,EAAAA,aArFe;AAAA;AAAA;AAAA,8CAqFDnC,GArFC,EAqFIC,GArFJ,EAqFSC,IArFT;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAuFXkC,cAAAA,uBAvFW,GAuFe,sCAvFf;AAwFXvB,cAAAA,MAxFW,GAwFF,CACbb,GAAG,CAACI,IAAJ,CAASe,KADI,CAxFE;AAAA;AAAA,qBA2FME,YAAGC,KAAH,CAASc,uBAAT,EAAkCvB,MAAlC,CA3FN;;AAAA;AAAA;AA2FTU,cAAAA,IA3FS,SA2FTA,IA3FS;;AAAA,kBA4FZA,IA5FY;AAAA;AAAA;AAAA;;AAAA,gDA6FRtB,GAAG,CAACyB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAArB,CA7FQ;;AAAA;AAgGXQ,cAAAA,QAhGW,GAgGAd,IAAI,CAAC,CAAD,CAAJ,CAAQe,WAhGR;AAiGXC,cAAAA,MAjGW,GAiGFvC,GAAG,CAACI,IAAJ,CAASD,WAAT,CAAqBqC,iBAArB,EAjGE;;AAAA,kBAkGZjC,gBAAO2B,eAAP,CAAuBK,MAAvB,EAA+BF,QAA/B,CAlGY;AAAA;AAAA;AAAA;;AAAA,gDAmGRpC,GAAG,CAACyB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAArB,CAnGQ;;AAAA;AAsGXY,cAAAA,WAtGW,GAsGGlC,gBAAOD,YAAP,CAAoBN,GAAG,CAACI,IAAJ,CAASI,QAA7B,CAtGH;AAuGXkC,cAAAA,kBAvGW,GAuGU,2DAvGV;AAAA;AAAA,qBAwGXrB,YAAGC,KAAH,CAASoB,kBAAT,EAA6B,CAACD,WAAD,EAAczC,GAAG,CAACI,IAAJ,CAASe,KAAvB,CAA7B,CAxGW;;AAAA;AAAA,gDAyGVlB,GAAG,CAACyB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAAA,MAAM,EAAE,GADkB;AAE1BE,gBAAAA,IAAI,EAAE,CAAC;AACLC,kBAAAA,OAAO,EAAE;AADJ,iBAAD;AAFoB,eAArB,CAzGU;;AAAA;AAAA;AAAA;AAAA,gDAgHV3B,IAAI,cAhHM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAvB;eAqHeJ,c","sourcesContent":["import '@babel/polyfill';\nimport db from '../db';\nimport Helper from '../middleware/Helper';\n\nconst UserController = {\n  /**\n     * create user\n     */\n  async createUser(req, res, next) {\n    try {\n      const securityKey = req.body.securityKey.toLowerCase();\n      const hashPassword = Helper.hashPassword(req.body.password);\n      const hashSecurity = Helper.hashPassword(securityKey);\n      const emailAddress = `${req.body.username.toLowerCase()}@epicmail.com`;\n\n      const createUserQuery = `INSERT INTO\n        users(email, firstName, lastName, password, securitykey, createdOn, modifiedOn)\n        VALUES($1, $2, $3, $4, $5, $6, $7) RETURNING *`;\n      const values = [\n        emailAddress,\n        req.body.firstName,\n        req.body.lastName,\n        hashPassword,\n        hashSecurity,\n        new Date(),\n        new Date(),\n      ];\n      console.log(\n        {\n          email: emailAddress,\n          key: securityKey,\n        },\n      );\n      const { rows } = await db.query(createUserQuery, values);\n      const token = Helper.generateToken(rows[0].email);\n\n      return res.status(201).send({\n        status: 201,\n        data: [{\n          token,\n          message: 'Your account has been created',\n          email: `Your epicmail address is ${emailAddress}`,\n        }],\n      });\n    } catch (error) {\n      if (error.routine === '_bt_check_unique') {\n        return next('User Already Exists');\n      }\n      return next(error);\n    }\n  },\n\n  /**\n   * user login\n   */\n  async login(req, res, next) {\n    try {\n      const loginQuery = 'SELECT * FROM users WHERE email = $1';\n      const userEmail = await req.body.email;\n      const { rows } = await db.query(loginQuery, [userEmail]);\n      if (!rows[0]) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'User not registered',\n          }],\n        });\n      }\n      if (!Helper.comparePassword(req.body.password, rows[0].password)) {\n        return res.status(400).send({ message: 'Invalid password' });\n      }\n      const token = Helper.generateToken(rows[0].email);\n      return res.status(200).send({\n        status: 200,\n        data: [{\n          token,\n          message: `Loggedin as ${rows[0].email}`,\n        }],\n      });\n    } catch (error) {\n      return next(error);\n    }\n  },\n\n  /**\n   * users can reset password using their security question\n   * @param {object} req\n   * @param {object} res\n   */\n  async resetPassword(req, res, next) {\n    try {\n      const getUserSecurityQuestion = 'SELECT * FROM users WHERE $1 = email';\n      const values = [\n        req.body.email,\n      ];\n      const { rows } = await db.query(getUserSecurityQuestion, values);\n      if (!rows) {\n        return res.status(400).send({ message: 'User not found' });\n      }\n\n      const security = rows[0].securitykey;\n      const answer = req.body.securityKey.toLocaleLowerCase();\n      if (!Helper.comparePassword(answer, security)) {\n        return res.status(400).send({ message: 'Your answer is incorrect' });\n      }\n\n      const newPassword = Helper.hashPassword(req.body.password);\n      const updateUserPassword = 'UPDATE users SET password=$1 WHERE $2 = email RETURNING *';\n      await db.query(updateUserPassword, [newPassword, req.body.email]);\n      return res.status(201).send({\n        status: 201,\n        data: [{\n          message: 'Your password has been successfully changed',\n        }],\n      });\n    } catch (error) {\n      return next(error);\n    }\n  },\n};\n\nexport default UserController;\n"],"file":"UserController.js"}