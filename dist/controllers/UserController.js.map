{"version":3,"sources":["../../server/controllers/UserController.js"],"names":["UserController","createUser","req","res","ValidateUserInput","signUpField","securityKey","Sanitize","trimAndLowerCase","body","hashPassword","Helper","trimInput","password","hashSecurity","emailAddress","username","createUserQuery","values","firstName","lastName","Date","console","log","email","key","db","query","rows","token","generateToken","status","send","data","message","routine","login","loginField","loginQuery","trim","comparePassword","error","resetPassword","resetPasswordField","getUserSecurityQuestion","security","securitykey","answer","toLocaleLowerCase","newPassword","updateUserPassword"],"mappings":"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","file":"UserController.js","sourcesContent":["import db from '../db';\nimport Helper from '../middleware/Helper';\nimport ValidateUserInput from '../middleware/UserValidator';\nimport Sanitize from '../middleware/Sanitize';\n\n\nconst UserController = {\n  /**\n     * create user\n     */\n  async createUser(req, res) {\n    try {\n      ValidateUserInput.signUpField(req, res);\n      const securityKey = Sanitize.trimAndLowerCase(req.body.securityKey);\n      const hashPassword = Helper.hashPassword(Sanitize.trimInput(req.body.password));\n      const hashSecurity = Helper.hashPassword(securityKey);\n      const emailAddress = `${Sanitize.trimAndLowerCase(req.body.username)}@epicmail.com`;\n\n      const createUserQuery = `INSERT INTO\n        users(email, firstName, lastName, password, securitykey, createdOn, modifiedOn)\n        VALUES($1, $2, $3, $4, $5, $6, $7) RETURNING *`;\n      const values = [\n        emailAddress,\n        req.body.firstName,\n        req.body.lastName,\n        hashPassword,\n        hashSecurity,\n        new Date(),\n        new Date(),\n      ];\n      console.log(\n        {\n          email: emailAddress,\n          key: securityKey,\n        },\n      );\n      const { rows } = await db.query(createUserQuery, values);\n      const token = Helper.generateToken(rows[0].email);\n\n      return res.status(201).send({\n        status: 201,\n        data: [{\n          token,\n          message: 'Your account has been created',\n          email: `Your epicmail address is ${emailAddress}`,\n        }],\n      });\n    } catch (error) {\n      if (error.routine === '_bt_check_unique') {\n        return res.send({\n          status: 400,\n          data: [{\n            message: 'User email exists already',\n          }],\n        });\n      }\n      return res.status(400).send({\n        status: 400,\n        message: error,\n      });\n    }\n  },\n\n  /**\n   * user login\n   */\n  async login(req, res) {\n    try {\n      ValidateUserInput.loginField(req, res);\n      const loginQuery = 'SELECT * FROM users WHERE email = $1';\n      const { rows } = await db.query(loginQuery, [req.body.email.trim()]);\n      if (!rows[0]) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'User not registered',\n          }],\n        });\n      }\n      if (!Helper.comparePassword(req.body.password, rows[0].password)) {\n        return res.status(400).send({ message: 'Invalid password' });\n      }\n      const token = Helper.generateToken(rows[0].email);\n      return res.status(200).send({\n        status: 200,\n        data: [{\n          token,\n          message: `Loggedin as ${rows[0].email}`,\n        }],\n      });\n    } catch (error) {\n      return res.send({\n        status: 400,\n        error,\n      });\n    }\n  },\n\n  /**\n   * users can reset password using their security question\n   * @param {object} req\n   * @param {object} res\n   */\n  async resetPassword(req, res) {\n    try {\n      ValidateUserInput.resetPasswordField(req, res);\n      const getUserSecurityQuestion = 'SELECT * FROM users WHERE $1 = email';\n      const values = [\n        req.body.email,\n      ];\n      const { rows } = await db.query(getUserSecurityQuestion, values);\n      if (!rows) {\n        return res.status(400).send({ message: 'User not found' });\n      }\n\n      const security = rows[0].securitykey;\n      const answer = req.body.securityKey.toLocaleLowerCase();\n      if (!Helper.comparePassword(answer, security)) {\n        return res.status(400).send({ message: 'Your answer is incorrect' });\n      }\n\n      const newPassword = Helper.hashPassword(req.body.password);\n      const updateUserPassword = 'UPDATE users SET password=$1 WHERE $2 = email RETURNING *';\n      await db.query(updateUserPassword, [newPassword, req.body.email]);\n      return res.status(201).send({\n        status: 201,\n        data: [{\n          message: 'Your password has been successfully changed',\n        }],\n      });\n    } catch (error) {\n      return res.status(400).send({\n        status: 400,\n        data: [{\n          error,\n        }],\n      });\n    }\n  },\n};\n\nexport default UserController;\n"]}