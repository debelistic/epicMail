{"version":3,"sources":["../../server/controllers/UserController.js"],"names":["UserController","createUser","req","res","body","firstName","lastName","email","password","status","send","message","test","hashPassword","Helper","createUserQuery","values","db","query","rows","token","generateToken","id","routine","error","login","loginQuery","comparePassword"],"mappings":"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","sourcesContent":["import db from '../db';\nimport Helper from '../middleware/Helper';\n\nconst UserController = {\n  /**\n     * create user\n     */\n  async createUser(req, res) {\n    if (!req.body.firstName || !req.body.lastName || !req.body.email || !req.body.password) {\n      return res.status(400).send({\n        status: 400,\n        message: 'Enter your first name, last name and password',\n      });\n    }\n    if (!/^[a-z\\d]{5,}$/i.test(req.body.email)) {\n      return res.status(400).send({ message: 'Set a valid email address' });\n    }\n    if (!/^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[$@#&!]).{6,}$/.test(req.body.password)) {\n      return res.status(400).send({\n        status: 400,\n        message: 'Password should contain at least a lower and upper case, a digit and special character',\n      });\n    }\n\n    const hashPassword = Helper.hashPassword(req.body.password);\n\n    const createUserQuery = `INSERT INTO\n      users(email, firstName, lastName, passowrd)\n      VALUES($1, $2, $3, $4)`;\n    const values = [\n      req.body.email,\n      req.body.firstName,\n      req.body.lastName,\n      hashPassword,\n    ];\n\n    try {\n      const { rows } = await db.query(createUserQuery, values);\n      const token = Helper.generateToken(rows[0].id);\n      return res.status(201).send({ token });\n    } catch (error) {\n      if (error.routine === '_bt_check_unique') {\n        return res.status(400).send({ message: 'User email exists already' });\n      }\n      return res.status(400).send({ error });\n    }\n  },\n\n  /**\n   * user login\n   */\n  async login(req, res) {\n    if (!req.body.email || !req.body.password) {\n      return res.status(400).send({ message: 'Some values are missing' });\n    }\n    if (!/^[a-z\\d]{5,}$/i.test(req.body.email)) {\n      return res.status(400).send({ message: 'Email not valid' });\n    }\n    const loginQuery = 'SELECT * FROM users WHERE email = $1';\n    try {\n      const { rows } = await db.query(loginQuery, [req.body.email]);\n      if (!rows[0]) {\n        return res.status(400).send({ message: 'Invalid login details' });\n      }\n      if (!Helper.comparePassword(rows[0].password, req.body.password)) {\n        return res.status(400).send({ message: 'Invalid password'});\n      }\n      const token = Helper.generateToken(rows[0].id);\n      return res.status(200).send({ token });\n    } catch (error) {\n      return res.status(400).send({ error });\n    }\n  },\n};\n\nexport default UserController;\n"],"file":"UserController.js"}