{"version":3,"sources":["../../server/controllers/GroupController.js"],"names":["createGroupQuery","addGroupMembersQuery","addGroupAdminQuery","groupMessageQuery","getGroupMssgQuery","deleteAGroupMemberQuery","editGroupNameQuery","deleteGroupQuery","GroupController","createGroup","req","res","values","body","name","trim","toLowerCase","description","user","email","db","query","rows","adminvalues","id","status","send","data","newgroup","error","addGroupMembers","params","membermail","member","sendGroupMessage","subject","message","getGroupMessages","messages","deleteAGroupMember","userid","err","getAllGroups","getGroupsQuery","rowCount","groups","editGroupName","newName","newname","deleteGroup"],"mappings":"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","sourcesContent":["import uuidv4 from 'uuid/v4';\nimport db from '../db';\n\n/** Queries */\nconst createGroupQuery = `INSERT INTO\n    groups(id, name, description, ownerId)\n    VALUES($1, $2, $3, $4) RETURNING *`;\n\nconst addGroupMembersQuery = `INSERT INTO\n    groupmembers(groupId, groupName, memberId, role)\n    VALUES($1, $2, $3, $4) RETURNING *`;\n\nconst addGroupAdminQuery = `INSERT INTO\n    groupmembers(groupId, groupName, memberId, role)\n    VALUES($1, $2, $3, $4) RETURNING *`;\n\nconst groupMessageQuery = `INSERT INTO\n    groupmessages(id, groupId, senderEmail, subject, message, status)\n    VALUES($1, $2, $3, $4, $5, $6) RETURNING *`;\n\nconst getGroupMssgQuery = 'SELECT FROM groupmessages WHERE groupId = $1';\nconst deleteAGroupMemberQuery = 'DELETE FROM groupmembers WHERE groupId=$1 AND memberId = $2 RETURNING *';\nconst editGroupNameQuery = 'UPDATE groups SET name=$1 WHERE id= $2 RETURNING *';\nconst deleteGroupQuery = 'DELETE FROM groups WHERE $1=id AND $2=ownerId RETURNING *';\n\n/** End of Queries */\n\n\nconst GroupController = {\n  /**\n   * create user group\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} group\n   */\n  async createGroup(req, res) {\n    const values = [\n      uuidv4(),\n      req.body.name.trim().toLowerCase(),\n      req.body.description.trim().toLowerCase(),\n      req.user.email.trim(),\n    ];\n\n    try {\n      const { rows } = await db.query(createGroupQuery, values);\n      const adminvalues = [\n        rows[0].id,\n        req.body.name.trim().toLowerCase(),\n        req.user.email.trim(),\n        'admin',\n      ];\n      await db.query(addGroupAdminQuery, adminvalues);\n      return res.status(201).send({\n        status: 201,\n        data: [{\n          status: 201,\n          newgroup: rows[0],\n        }],\n      });\n    } catch (error) {\n      return res.send({\n        status: 500,\n        error,\n      });\n    }\n  },\n\n  /**\n   * group owner add users join a group\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} group array\n   */\n  async addGroupMembers(req, res) {\n    const values = [\n      req.params.id,\n      req.body.name,\n      req.body.membermail,\n      'member',\n    ];\n    try {\n      const { rows } = await db.query(addGroupMembersQuery, values);\n      return res.status(201).send({\n        status: 201,\n        data: [{\n          status: 201,\n          member: rows[0],\n        }],\n      });\n    } catch (error) {\n      return res.send({\n        status: 500,\n        data: [{\n          error,\n        }],\n      });\n    }\n  },\n\n  /**\n   * sends message to a group where sender is member or owner\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} sent message\n   */\n  async sendGroupMessage(req, res) {\n    const values = [\n      uuidv4(),\n      req.params.id,\n      req.user.email,\n      req.body.subject,\n      req.body.message,\n      'unread',\n    ];\n    try {\n      const { rows } = await db.query(groupMessageQuery, values);\n      return res.status(201).send({\n        status: 201,\n        data: [{\n          message: rows[0],\n        }],\n      });\n    } catch (err) {\n      return res.status(500).send({\n        message: err,\n      });\n    }\n  },\n\n  /**\n   * returns an array of messages for a group\n   * @param {object} req\n   * @param {object} res\n   */\n  async getGroupMessages(req, res) {\n    try {\n      const { rows } = await db.query(getGroupMssgQuery, [req.params.id]);\n      return res.status(200).send({\n        status: 200,\n        data: [{\n          messages: rows,\n        }],\n      });\n    } catch (error) {\n      return res.status(500).send({\n        error,\n      });\n    }\n  },\n\n  /**\n   * deletes a group member\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} group members array\n   */\n  async deleteAGroupMember(req, res) {\n    try {\n      await db.query(deleteAGroupMemberQuery, [req.params.id, req.params.userid]);\n\n      return res.status(204).send({\n        status: 204,\n        data: [{\n          message: `You have removed ${req.params.userid}`,\n        }],\n      });\n    } catch (err) {\n      return res.status(500).send({\n        status: 500,\n        err,\n      });\n    }\n  },\n\n  /**\n   * get all groups\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} groups\n   */\n  async getAllGroups(req, res) {\n    const getGroupsQuery = 'SELECT * FROM groups';\n    try {\n      const { rows, rowCount } = await db.query(getGroupsQuery);\n      return res.status(200).send({\n        status: 200,\n        data: [\n          {\n            message: `There are ${rowCount} groups`,\n            groups: rows,\n          },\n        ],\n      });\n    } catch (error) {\n      return res.status(500).send({\n        status: 500,\n        data: [\n          error,\n        ],\n      });\n    }\n  },\n\n  /**\n   * edit group name\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } success or error\n   */\n  async editGroupName(req, res) {\n    try {\n      const { rows } = await db.query(editGroupNameQuery, [req.body.newName, req.params.id]);\n      return res.status(200).send({\n        status: 200,\n        data: [{\n          newname: rows[0].name,\n        }],\n      });\n    } catch (error) {\n      return res.status(500).send({\n        status: 500,\n        data: [\n          error,\n        ],\n      });\n    }\n  },\n\n\n  /**\n   * delete a group\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } success or error\n   */\n  async deleteGroup(req, res) {\n    try {\n      const { rows } = await db.query(deleteGroupQuery, [req.params.id, req.user.email]);\n      return res.status(204).send({\n        status: 204,\n        data: [{\n          message: `${rows} has been deleted`,\n        }],\n      });\n    } catch (error) {\n      return res.status(500).send({\n        status: 500,\n        data: [\n          error,\n        ],\n      });\n    }\n  },\n};\n\nexport default GroupController;\n"],"file":"GroupController.js"}