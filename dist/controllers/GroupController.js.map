{"version":3,"sources":["../../server/controllers/GroupController.js"],"names":["GroupController","createGroup","req","res","body","name","description","user","status","send","message","email","createGroupQuery","values","db","query","rows","addGroupMembers","groupName","groupId","membermail","addGroupMembersQuery","verifyAdminQuery","Result","Admin","ownerid","newmember","memberId","routine","err","seeGroupMessages","findGroupMessagesQuery","rowCount","seeGroupMembers","seeGroupMembersQuery","sendGroupMessage","groupMessageQuery","deleteAGroupMember","deleteAGroupMemberQuery","deleteAGroupMessage","id","deleteAGroupMessagesQuery","params"],"mappings":"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","file":"GroupController.js","sourcesContent":["import uuidv4 from 'uuid/v4';\nimport db from '../db';\n\nconst GroupController = {\n  /**\n   * create user group\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} group\n   */\n  async createGroup(req, res) {\n    if (!req.body.name || !req.body.description || !req.user) {\n      return res.status(400).send({ message: 'All fields are required' });\n    }\n    if (!req.user.email) {\n      return res.status(403).send({ message: 'only registered users can make groups' });\n    }\n    const createGroupQuery = `INSERT INTO\n    groups(name, description, ownerId)\n    VALUES($1, $2, $3)\n    returning *`;\n    const values = [\n      req.body.name,\n      req.body.description,\n      req.user.email,\n    ];\n    try {\n      const { rows } = await db.query(createGroupQuery, values);\n      return res.status(201).send(rows[0]);\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n\n  /**\n   * group owner add users join a group\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} group array\n   */\n  async addGroupMembers(req, res) {\n    if (!req.user.email) {\n      return res.status(403).send({ message: 'only registered users can make groups' });\n    }\n    if (!req.body.groupName || !req.body.groupId || !req.body.membermail) {\n      return res.status(400).send({ message: 'enter a group name and new mail' });\n    }\n\n    const addGroupMembersQuery = `INSERT INTO\n    groupmembers(id, groupId, groupName, memberId)\n    VALUES($1, $2, $3, $4) RETURNING *`;\n    const values = [\n      uuidv4(),\n      req.body.groupId,\n      req.body.groupName,\n      req.body.membermail,\n    ];\n    try {\n      const verifyAdminQuery = 'SELECT * FROM groups WHERE ownerId = $1 AND Id = $2';\n      const Result = await db.query(verifyAdminQuery, [req.user.email, req.body.groupId]);\n      const Admin = Result.rows[0].ownerid;\n      if (!Admin) {\n        return res.status(403).send({ message: 'Only Admins can add users' });\n      }\n      const { rows } = await db.query(addGroupMembersQuery, values);\n      return res.status(201).send({\n        status: 201,\n        newmember: rows[0].memberId,\n      });\n    } catch (err) {\n      if (err.routine === '_bt_check_unique') {\n        return res.status(400).send({ message: 'Group Eixts Already' });\n      }\n      return res.status(400).send({ err });\n    }\n  },\n\n\n  /**\n   * see group messages\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} array of group messages\n   */\n  async seeGroupMessages(req, res) {\n    if (!req.body.groupName || !req.user) {\n      return res.status(403).send({ message: 'you are not a member' });\n    }\n    const findGroupMessagesQuery = 'SELECT * FROM groupmessages WHERE ownerId = $1 AND groupName = $2';\n    try {\n      // eslint-disable-next-line max-len\n      const { rows, rowCount } = await db.query(findGroupMessagesQuery, [req.user.email, req.body.groupName]);\n      if (!rows[0]) {\n        return res.status(403).send({ message: 'you are not a member' });\n      }\n      return res.status(200).send({ rows, rowCount });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n\n  /**\n   * returns an array of group members\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} group members array\n   */\n  async seeGroupMembers(req, res) {\n    if (!req.body.groupName || !req.user) {\n      return res.status(403).send({ message: 'you are not a member' });\n    }\n    const seeGroupMembersQuery = 'SELECT * FROM groupmembers WHERE memberId = $1 AND groupName = $2';\n    try {\n      // eslint-disable-next-line max-len\n      const { rows, rowCount } = await db.query(seeGroupMembersQuery, [req.user.email, req.body.groupName]);\n      if (!rows[0]) {\n        return res.status(403).send({ message: 'you are not a member' });\n      }\n      return res.status(200).send({ rows, rowCount });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n\n  /**\n   * sends message to a group where sender is member or owner\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} sent message\n   */\n  async sendGroupMessage(req, res) {\n    if (!req.body.message || !req.body.groupName || !req.user) {\n      return res.status(400).send({ message: 'enter a text' });\n    }\n    const groupMessageQuery = `INSERT INTO\n      groupmessages(message, groupName, ownerId)\n      VALUES($1, $2, $3)\n      returning *`;\n    const values = [\n      req.body.message,\n      req.body.groupName,\n      req.user.email,\n    ];\n    try {\n      const { rows } = await db.query(groupMessageQuery, values);\n      return res.status(201).send(rows[0]);\n    } catch (err) {\n      if (err.routine === 'ri_ReportViolation') {\n        return res.status(400).send({ message: 'Not a group' });\n      }\n      return res.status(400).send(err);\n    }\n  },\n\n\n  /**\n   * deletes a group member\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} group members array\n   */\n  async deleteAGroupMember(req, res) {\n    if (!req.body.memberId || !req.body.groupName) {\n      return res.status(400).send({ message: 'Some fields are missing' });\n    }\n    const deleteAGroupMemberQuery = 'DELETE FROM groupmembers WHERE memberId=$1 AND groupName = $2';\n    try {\n      // eslint-disable-next-line max-len\n      const { rows } = await db.query(deleteAGroupMemberQuery, [req.body.memberId, req.body.groupName]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'member does not not exist' });\n      }\n      return res.send({ message: `You have removed ${req.body.memberId}` });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n  /**\n   * deletes a group message\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} group members array\n   */\n  async deleteAGroupMessage(req, res) {\n    if (!req.body.id || !req.body.groupName || !req.user.email) {\n      return res.status(400).send({ message: 'Some fields are missing' });\n    }\n    const deleteAGroupMessagesQuery = 'DELETE FROM groupmessages WHERE id=$1 AND groupName = $2';\n    try {\n      const verifyAdminQuery = 'SELECT * FROM groups WHERE ownerId = $1 AND Id = $2';\n      const Result = await db.query(verifyAdminQuery, [req.user.email, req.params.groupId]);\n      const Admin = Result.rows[0].ownerid;\n      if (!Admin === req.user.email) {\n        return res.status(403).send({ message: 'Only Admins can delete users' });\n      }\n      // eslint-disable-next-line max-len\n      const { rows } = await db.query(deleteAGroupMessagesQuery, [req.body.memberId, req.body.groupName]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'member does not not exist' });\n      }\n      return res.send({ message: `You have removed ${req.body.memberId}` });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n};\n\nexport default GroupController;\n"]}