{"version":3,"sources":["../../server/controllers/GroupController.js"],"names":["GroupController","createGroup","req","res","ValidateGroupsInput","addGroup","addAdmin","createGroupQuery","values","body","name","trim","toLowerCase","description","user","email","db","query","rows","status","send","data","newgroup","routine","message","error","addGroupMembers","addGroupMembersQuery","params","id","membermail","verifyMembermail","verifyAdminQuery","Result","Admin","ownerid","member","err","sendGroupMessage","groupName","groupMessageQuery","subject","deleteAGroupMember","deleteAGroupMemberQuery","prams","userid","getAllGroups","getGroupsQuery","rowCount","editGroupName","editGroupNameQuery","newName","newGroupName","newname","deleteGroup","deleteGroupQuery"],"mappings":"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","sourcesContent":["import ValidateGroupsInput from '../middleware/GroupsValidator';\r\nimport db from '../db';\r\n\r\nconst GroupController = {\r\n  /**\r\n   * create user group\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} group\r\n   */\r\n  async createGroup(req, res) {\r\n    ValidateGroupsInput.addGroup(req, res);\r\n    ValidateGroupsInput.addAdmin(req, res);\r\n    const createGroupQuery = `INSERT INTO\r\n    groups(name, description, ownerId)\r\n    VALUES($1, $2, $3)\r\n    returning *`;\r\n    const values = [\r\n      req.body.name.trim().toLowerCase(),\r\n      req.body.description.trim().toLowerCase(),\r\n      req.user.email.trim(),\r\n    ];\r\n    try {\r\n      const { rows } = await db.query(createGroupQuery, values);\r\n      return res.status(201).send({\r\n        status: 201,\r\n        data: [{\r\n          newgroup: rows[0],\r\n        }],\r\n      });\r\n    } catch (error) {\r\n      if (error.routine === '_bt_check_unique') {\r\n        return res.send({\r\n          status: 400,\r\n          message: 'Group already exist',\r\n        });\r\n      }\r\n      return res.send({\r\n        status: 400,\r\n        error,\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * group owner add users join a group\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} group array\r\n   */\r\n  async addGroupMembers(req, res) {\r\n    const addGroupMembersQuery = `INSERT INTO\r\n    groupmembers(groupId, groupName, memberId, role)\r\n    VALUES($1, $2, $3, $4) RETURNING *`;\r\n    const values = [\r\n      req.params.id,\r\n      req.body.name,\r\n      req.body.membermail,\r\n      'member',\r\n    ];\r\n    try {\r\n      ValidateGroupsInput.verifyMembermail(req, res);\r\n      const verifyAdminQuery = 'SELECT * FROM groups WHERE ownerId = $1 AND Id = $2';\r\n      const Result = await db.query(verifyAdminQuery, [req.user.email, req.params.id]);\r\n      const Admin = Result.rows[0].ownerid;\r\n      if (!Admin) {\r\n        return res.status(403).send({ message: 'Only Admins can add users' });\r\n      }\r\n      const { rows } = await db.query(addGroupMembersQuery, values);\r\n      return res.send({\r\n        status: 201,\r\n        data: [\r\n          {\r\n            member: rows[0],\r\n          },\r\n        ],\r\n      });\r\n    } catch (err) {\r\n      if (err.routine === '_bt_check_unique') {\r\n        return res.status(400).send({\r\n          status: 400,\r\n          message: 'Member Eixts Already',\r\n        });\r\n      }\r\n      return res.send({\r\n        status: 400,\r\n        data: [\r\n          {\r\n            err,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * sends message to a group where sender is member or owner\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} sent message\r\n   */\r\n  async sendGroupMessage(req, res) {\r\n    if (!req.body.message || !req.body.groupName || !req.user) {\r\n      return res.status(400).send({ message: 'enter a text' });\r\n    }\r\n    const groupMessageQuery = `INSERT INTO\r\n      groupmessages(groupName, ownerId, subject, message, status)\r\n      VALUES($1, $2, $3, $4, $5)\r\n      returning *`;\r\n    const values = [\r\n      req.body.groupName,\r\n      req.user.email,\r\n      req.body.subject,\r\n      req.body.message,\r\n      'unread',\r\n    ];\r\n    try {\r\n      const { rows } = await db.query(groupMessageQuery, values);\r\n      return res.status(201).send(rows[0]);\r\n    } catch (err) {\r\n      if (err.routine === 'ri_ReportViolation') {\r\n        return res.status(400).send({ message: 'Not a group' });\r\n      }\r\n      return res.status(400).send(err);\r\n    }\r\n  },\r\n\r\n\r\n  /**\r\n   * deletes a group member\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} group members array\r\n   */\r\n  async deleteAGroupMember(req, res) {\r\n    const deleteAGroupMemberQuery = 'DELETE FROM groupmembers WHERE id=$1 AND groupId = $2 RETURNING *';\r\n    try {\r\n      const { rows } = await db.query(deleteAGroupMemberQuery, [req.prams.id, req.params.userid]);\r\n      if (!rows[0]) {\r\n        return res.status(400).send({\r\n          status: 400,\r\n          data: [{\r\n            message: 'member does not not exist',\r\n          }],\r\n        });\r\n      }\r\n      return res.send({\r\n        status: 204,\r\n        data: [{\r\n          message: `You have removed ${req.params.userid}`,\r\n        }],\r\n      });\r\n    } catch (err) {\r\n      return res.status(400).send({\r\n        status: 400,\r\n        err,\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * get all groups\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @returns {object} groups\r\n   */\r\n  async getAllGroups(req, res) {\r\n    const getGroupsQuery = 'SELECT * FROM groups';\r\n    try {\r\n      const { rows, rowCount } = await db.query(getGroupsQuery);\r\n      return res.send({\r\n        status: 200,\r\n        data: [\r\n          {\r\n            rows,\r\n            rowCount,\r\n          },\r\n        ],\r\n      });\r\n    } catch (error) {\r\n      return res.send({\r\n        status: 400,\r\n        data: [\r\n          error,\r\n        ],\r\n      });\r\n    }\r\n  },\r\n\r\n  async editGroupName(req, res) {\r\n    const editGroupNameQuery = 'UPDATE groups SET name=$1 WHERE id= $2 RETURNING *';\r\n    try {\r\n      if (!req.body.newName) {\r\n        return res.send({\r\n          status: 400,\r\n          data: [\r\n            {\r\n              message: 'enter new name',\r\n            },\r\n          ],\r\n        });\r\n      }\r\n      const newGroupName = await db.query(editGroupNameQuery, [req.body.newName, req.params.id]);\r\n      return res.send({\r\n        status: 200,\r\n        data: [{\r\n          newname: newGroupName.rows[0],\r\n        }],\r\n      });\r\n    } catch (error) {\r\n      return res.send({\r\n        status: 400,\r\n        data: [\r\n          error,\r\n        ],\r\n      });\r\n    }\r\n  },\r\n\r\n  async deleteGroup(req, res) {\r\n    // admin should delete group\r\n    const deleteGroupQuery = 'DELETE FROM groups WHERE $1=id AND $2=ownerId RETURNING *';\r\n    try {\r\n      const { rows } = await db.query(deleteGroupQuery, [req.params.id, req.user.email]);\r\n      if (!rows[0]) {\r\n        return res.send({\r\n          status: 400,\r\n          data: [\r\n            {\r\n              message: 'Group not found',\r\n            },\r\n          ],\r\n        });\r\n      }\r\n      return res.send({\r\n        status: 204,\r\n        data: [{\r\n          message: 'Group successfuly deleted',\r\n        }],\r\n      });\r\n    } catch (error) {\r\n      return res.send({\r\n        status: 400,\r\n        data: [\r\n          error,\r\n        ],\r\n      });\r\n    }\r\n  },\r\n};\r\n\r\nexport default GroupController;\r\n"],"file":"GroupController.js"}