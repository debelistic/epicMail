{"version":3,"sources":["../../server/controllers/GroupController.js"],"names":["GroupController","createGroup","req","res","ValidateGroupsInput","addGroup","addAdmin","createGroupQuery","values","body","name","trim","toLowerCase","description","user","email","db","query","rows","status","send","data","newgroup","routine","message","error","addGroupMembers","addGroupMembersQuery","params","id","membermail","verifyMembermail","verifyAdminQuery","Result","Admin","ownerid","member","err","sendGroupMessage","groupName","groupMessageQuery","subject","deleteAGroupMember","deleteAGroupMemberQuery","prams","userid","getAllGroups","getGroupsQuery","rowCount","editGroupName","editGroupNameQuery","newName","newGroupName","newname","deleteGroup","deleteGroupQuery"],"mappings":"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","file":"GroupController.js","sourcesContent":["import ValidateGroupsInput from '../middleware/GroupsValidator';\nimport db from '../db';\n\nconst GroupController = {\n  /**\n   * create user group\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} group\n   */\n  async createGroup(req, res) {\n    ValidateGroupsInput.addGroup(req, res);\n    ValidateGroupsInput.addAdmin(req, res);\n    const createGroupQuery = `INSERT INTO\n    groups(name, description, ownerId)\n    VALUES($1, $2, $3)\n    returning *`;\n    const values = [\n      req.body.name.trim().toLowerCase(),\n      req.body.description.trim().toLowerCase(),\n      req.user.email.trim(),\n    ];\n    try {\n      const { rows } = await db.query(createGroupQuery, values);\n      return res.status(201).send({\n        status: 201,\n        data: [{\n          newgroup: rows[0],\n        }],\n      });\n    } catch (error) {\n      if (error.routine === '_bt_check_unique') {\n        return res.send({\n          status: 400,\n          message: 'Group already exist',\n        });\n      }\n      return res.send({\n        status: 400,\n        error,\n      });\n    }\n  },\n\n  /**\n   * group owner add users join a group\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} group array\n   */\n  async addGroupMembers(req, res) {\n    const addGroupMembersQuery = `INSERT INTO\n    groupmembers(groupId, groupName, memberId, role)\n    VALUES($1, $2, $3, $4) RETURNING *`;\n    const values = [\n      req.params.id,\n      req.body.name,\n      req.body.membermail,\n      'member',\n    ];\n    try {\n      ValidateGroupsInput.verifyMembermail(req, res);\n      const verifyAdminQuery = 'SELECT * FROM groups WHERE ownerId = $1 AND Id = $2';\n      const Result = await db.query(verifyAdminQuery, [req.user.email, req.params.id]);\n      const Admin = Result.rows[0].ownerid;\n      if (!Admin) {\n        return res.status(403).send({ message: 'Only Admins can add users' });\n      }\n      const { rows } = await db.query(addGroupMembersQuery, values);\n      return res.send({\n        status: 201,\n        data: [\n          {\n            member: rows[0],\n          },\n        ],\n      });\n    } catch (err) {\n      if (err.routine === '_bt_check_unique') {\n        return res.status(400).send({\n          status: 400,\n          message: 'Member Eixts Already',\n        });\n      }\n      return res.send({\n        status: 400,\n        data: [\n          {\n            err,\n          },\n        ],\n      });\n    }\n  },\n\n  /**\n   * sends message to a group where sender is member or owner\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} sent message\n   */\n  async sendGroupMessage(req, res) {\n    if (!req.body.message || !req.body.groupName || !req.user) {\n      return res.status(400).send({ message: 'enter a text' });\n    }\n    const groupMessageQuery = `INSERT INTO\n      groupmessages(groupName, ownerId, subject, message, status)\n      VALUES($1, $2, $3, $4, $5)\n      returning *`;\n    const values = [\n      req.body.groupName,\n      req.user.email,\n      req.body.subject,\n      req.body.message,\n      'unread',\n    ];\n    try {\n      const { rows } = await db.query(groupMessageQuery, values);\n      return res.status(201).send(rows[0]);\n    } catch (err) {\n      if (err.routine === 'ri_ReportViolation') {\n        return res.status(400).send({ message: 'Not a group' });\n      }\n      return res.status(400).send(err);\n    }\n  },\n\n\n  /**\n   * deletes a group member\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} group members array\n   */\n  async deleteAGroupMember(req, res) {\n    const deleteAGroupMemberQuery = 'DELETE FROM groupmembers WHERE id=$1 AND groupId = $2 RETURNING *';\n    try {\n      const { rows } = await db.query(deleteAGroupMemberQuery, [req.prams.id, req.params.userid]);\n      if (!rows[0]) {\n        return res.status(400).send({\n          status: 400,\n          data: [{\n            message: 'member does not not exist',\n          }],\n        });\n      }\n      return res.send({\n        status: 204,\n        data: [{\n          message: `You have removed ${req.params.userid}`,\n        }],\n      });\n    } catch (err) {\n      return res.status(400).send({\n        status: 400,\n        err,\n      });\n    }\n  },\n\n  /**\n   * get all groups\n   * @param {object} req\n   * @param {object} res\n   * @returns {object} groups\n   */\n  async getAllGroups(req, res) {\n    const getGroupsQuery = 'SELECT * FROM groups';\n    try {\n      const { rows, rowCount } = await db.query(getGroupsQuery);\n      return res.send({\n        status: 200,\n        data: [\n          {\n            rows,\n            rowCount,\n          },\n        ],\n      });\n    } catch (error) {\n      return res.send({\n        status: 400,\n        data: [\n          error,\n        ],\n      });\n    }\n  },\n\n  async editGroupName(req, res) {\n    const editGroupNameQuery = 'UPDATE groups SET name=$1 WHERE id= $2 RETURNING *';\n    try {\n      if (!req.body.newName) {\n        return res.send({\n          status: 400,\n          data: [\n            {\n              message: 'enter new name',\n            },\n          ],\n        });\n      }\n      const newGroupName = await db.query(editGroupNameQuery, [req.body.newName, req.params.id]);\n      return res.send({\n        status: 200,\n        data: [{\n          newname: newGroupName.rows[0],\n        }],\n      });\n    } catch (error) {\n      return res.send({\n        status: 400,\n        data: [\n          error,\n        ],\n      });\n    }\n  },\n\n  async deleteGroup(req, res) {\n    // admin should delete group\n    const deleteGroupQuery = 'DELETE FROM groups WHERE $1=id AND $2=ownerId RETURNING *';\n    try {\n      const { rows } = await db.query(deleteGroupQuery, [req.params.id, req.user.email]);\n      if (!rows[0]) {\n        return res.send({\n          status: 400,\n          data: [\n            {\n              message: 'Group not found',\n            },\n          ],\n        });\n      }\n      return res.send({\n        status: 204,\n        data: [{\n          message: 'Group successfuly deleted',\n        }],\n      });\n    } catch (error) {\n      return res.send({\n        status: 400,\n        data: [\n          error,\n        ],\n      });\n    }\n  },\n};\n\nexport default GroupController;\n"]}