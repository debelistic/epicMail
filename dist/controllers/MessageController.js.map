{"version":3,"sources":["../../server/controllers/MessageController.js"],"names":["MessageController","create","req","res","ValidateMessageInput","newMessageInput","messageStatus","body","receiverEmail","createMessageQuery","values","Date","user","email","subject","trim","message","parentMessageId","db","query","rows","status","send","data","newsent","err","getInbox","findInboxQuery","rowCount","getAInbox","findAInboxMailQuery","params","id","updateStatusQuery","getUnread","findAllUnreadQuery","getSent","findSentQuery","getASent","findASentMailQuery","sent","deleteAInbox","deleteAInboxMailQuery","deleteASent","deleteASentMailQuery"],"mappings":"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","file":"MessageController.js","sourcesContent":["import db from '../db';\nimport ValidateMessageInput from '../middleware/MessagesValidator';\n\nconst MessageController = {\n\n  /**\n   * create a new message\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } message object\n   */\n  async create(req, res) {\n    ValidateMessageInput.newMessageInput(req, res);\n\n    let messageStatus;\n\n    if (!req.body.receiverEmail) {\n      messageStatus = 'drafts';\n    } else {\n      messageStatus = 'unread';\n    }\n\n    const createMessageQuery = `INSERT INTO\n        messages(createdOn, receiverEmail, senderEmail, subject, message, parentMessageId, status)\n        VALUES($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *`;\n    const values = [\n      new Date(),\n      req.body.receiverEmail,\n      req.user.email,\n      req.body.subject.trim(),\n      req.body.message,\n      req.body.parentMessageId,\n      messageStatus,\n    ];\n\n    try {\n      const { rows } = await db.query(createMessageQuery, values);\n      return res.status(201).send({\n        status: 201,\n        data: [{\n          message: 'Your message has been sent',\n          newsent: rows[0],\n        }],\n      });\n    } catch (err) {\n      return res.status(400).send({\n        status: 400,\n        err,\n      });\n    }\n  },\n\n  /**\n   * get inbox for a user\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } inbox array\n   */\n\n  async getInbox(req, res) {\n    const findInboxQuery = 'SELECT * FROM messages WHERE receiverEmail = $1';\n    try {\n      if (!req.user.email) {\n        return res.status(403).send({ message: 'Login to your account' });\n      }\n      const { rows, rowCount } = await db.query(findInboxQuery, [req.user.email]);\n      return res.status(200).send({ rows, rowCount });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n\n  /**\n   * get a user inbox message\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } inbox mail object\n   */\n  async getAInbox(req, res) {\n    try {\n      const findAInboxMailQuery = 'SELECT * FROM messages WHERE id=$1 AND receiverEmail = $2';\n      if (!req.user.email) {\n        return res.status(403).send({ message: 'Login to your account' });\n      }\n\n      const { rows } = await db.query(findAInboxMailQuery, [req.params.id, req.user.email]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'we could not find your mail' });\n      }\n      const updateStatusQuery = 'UPDATE messages SET status=$1 WHERE receiverEmail = $2 RETURNING *';\n      await db.query(updateStatusQuery, ['read', req.user.email]);\n      return res.status(200).send({ rows });\n    } catch (err) {\n      return res.status(400).send({ err });\n    }\n  },\n\n  async getUnread(req, res) {\n    try {\n      const findAllUnreadQuery = 'SELECT * FROM messages WHERE receiverEmail = $1 AND status = $2';\n      if (!req.user.email) {\n        return res.status(403).send({ message: 'Login to your account' });\n      }\n      const { rows, rowCount } = await db.query(findAllUnreadQuery, [req.user.email, 'unread']);\n      return res.status(200).send({ rows, rowCount });\n    } catch (err) {\n      return res.status(400).send({ err });\n    }\n  },\n\n  /**\n   * get all sent mails\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } sent array\n   */\n  async getSent(req, res) {\n    try {\n      const findSentQuery = 'SELECT * FROM messages WHERE senderEmail = $1';\n      if (!req.user.email) {\n        return res.status(403).send({ message: 'Login to your account' });\n      }\n      const { rows, rowCount } = await db.query(findSentQuery, [req.user.email]);\n      return res.status(200).send({ rows, rowCount });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n\n  /**\n   * get a user sent mail\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } sent mail object\n   */\n  async getASent(req, res) {\n    try {\n      const findASentMailQuery = 'SELECT * FROM messages WHERE id = $1 AND senderEmail = $2';\n      const { rows } = await db.query(findASentMailQuery, [req.params.id, req.user.email]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'we could not find your mail' });\n      }\n      return res.status(200).send({ sent: rows[0] });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n\n  /**\n   * delete a mail from inbox\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } success or error\n   */\n  async deleteAInbox(req, res) {\n    try {\n      const deleteAInboxMailQuery = 'DELETE FROM messages WHERE id=$1 AND receiverEmail = $2 RETURNING *';\n      const { rows } = await db.query(deleteAInboxMailQuery, [req.params.id, req.user.email]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'we could not find your mail' });\n      }\n      return res.send({\n        status: 204,\n        message: 'deleted',\n      });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n\n  /**\n   * delete a mail from sent\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } success or error\n   */\n  async deleteASent(req, res) {\n    try {\n      const deleteASentMailQuery = 'DELETE FROM messages WHERE id=$1 AND senderEmail = $2 RETURNING *';\n      const { rows } = await db.query(deleteASentMailQuery, [req.params.id, req.user.email]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'we could not find your mail' });\n      }\n      return res.send({\n        status: 204,\n        message: 'deleted',\n      });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n};\n\nexport default MessageController;\n"]}