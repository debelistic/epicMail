{"version":3,"sources":["../../server/controllers/MessageController.js"],"names":["MessageController","create","req","res","ValidateMessageInput","newMessageInput","body","receiverEmail","messageStatus","createMessageQuery","values","Date","user","email","subject","trim","message","parentMessageId","db","query","rows","status","send","data","newsent","err","getInbox","findInboxQuery","rowCount","getAInbox","findAInboxMailQuery","params","id","updateStatusQuery","getUnread","findAllUnreadQuery","getSent","findSentQuery","getASent","findASentMailQuery","sent","deleteAInbox","deleteAInboxMailQuery","deleteASent","deleteASentMailQuery"],"mappings":"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","sourcesContent":["import db from '../db';\r\nimport ValidateMessageInput from '../middleware/MessagesValidator';\r\n\r\nconst MessageController = {\r\n\r\n  /**\r\n   * create a new message\r\n   * @param { object } req\r\n   * @param { object } res\r\n   * @returns { object } message object\r\n   */\r\n  async create(req, res) {\r\n    ValidateMessageInput.newMessageInput(req, res);\r\n\r\n    let messageStatus;\r\n\r\n    if (!req.body.receiverEmail) {\r\n      messageStatus = 'drafts';\r\n    } else {\r\n      messageStatus = 'unread';\r\n    }\r\n\r\n    const createMessageQuery = `INSERT INTO\r\n        messages(createdOn, receiverEmail, senderEmail, subject, message, parentMessageId, status)\r\n        VALUES($1, $2, $3, $4, $5, $6, $7)\r\n        RETURNING *`;\r\n    const values = [\r\n      new Date(),\r\n      req.body.receiverEmail,\r\n      req.user.email,\r\n      req.body.subject.trim(),\r\n      req.body.message,\r\n      req.body.parentMessageId,\r\n      messageStatus,\r\n    ];\r\n\r\n    try {\r\n      const { rows } = await db.query(createMessageQuery, values);\r\n      return res.status(201).send({\r\n        status: 201,\r\n        data: [{\r\n          message: 'Your message has been sent',\r\n          newsent: rows[0],\r\n        }],\r\n      });\r\n    } catch (err) {\r\n      return res.status(400).send({\r\n        status: 400,\r\n        err,\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * get inbox for a user\r\n   * @param { object } req\r\n   * @param { object } res\r\n   * @returns { object } inbox array\r\n   */\r\n\r\n  async getInbox(req, res) {\r\n    const findInboxQuery = 'SELECT * FROM messages WHERE receiverEmail = $1';\r\n    try {\r\n      if (!req.user.email) {\r\n        return res.status(403).send({ message: 'Login to your account' });\r\n      }\r\n      const { rows, rowCount } = await db.query(findInboxQuery, [req.user.email]);\r\n      return res.status(200).send({ rows, rowCount });\r\n    } catch (err) {\r\n      return res.status(400).send(err);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * get a user inbox message\r\n   * @param { object } req\r\n   * @param { object } res\r\n   * @returns { object } inbox mail object\r\n   */\r\n  async getAInbox(req, res) {\r\n    try {\r\n      const findAInboxMailQuery = 'SELECT * FROM messages WHERE id=$1 AND receiverEmail = $2';\r\n      if (!req.user.email) {\r\n        return res.status(403).send({ message: 'Login to your account' });\r\n      }\r\n\r\n      const { rows } = await db.query(findAInboxMailQuery, [req.params.id, req.user.email]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ message: 'we could not find your mail' });\r\n      }\r\n      const updateStatusQuery = 'UPDATE messages SET status=$1 WHERE receiverEmail = $2 RETURNING *';\r\n      await db.query(updateStatusQuery, ['read', req.user.email]);\r\n      return res.status(200).send({ rows });\r\n    } catch (err) {\r\n      return res.status(400).send({ err });\r\n    }\r\n  },\r\n\r\n  async getUnread(req, res) {\r\n    try {\r\n      const findAllUnreadQuery = 'SELECT * FROM messages WHERE receiverEmail = $1 AND status = $2';\r\n      if (!req.user.email) {\r\n        return res.status(403).send({ message: 'Login to your account' });\r\n      }\r\n      const { rows, rowCount } = await db.query(findAllUnreadQuery, [req.user.email, 'unread']);\r\n      return res.status(200).send({ rows, rowCount });\r\n    } catch (err) {\r\n      return res.status(400).send({ err });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * get all sent mails\r\n   * @param { object } req\r\n   * @param { object } res\r\n   * @returns { object } sent array\r\n   */\r\n  async getSent(req, res) {\r\n    try {\r\n      const findSentQuery = 'SELECT * FROM messages WHERE senderEmail = $1';\r\n      if (!req.user.email) {\r\n        return res.status(403).send({ message: 'Login to your account' });\r\n      }\r\n      const { rows, rowCount } = await db.query(findSentQuery, [req.user.email]);\r\n      return res.status(200).send({ rows, rowCount });\r\n    } catch (err) {\r\n      return res.status(400).send(err);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * get a user sent mail\r\n   * @param { object } req\r\n   * @param { object } res\r\n   * @returns { object } sent mail object\r\n   */\r\n  async getASent(req, res) {\r\n    try {\r\n      const findASentMailQuery = 'SELECT * FROM messages WHERE id = $1 AND senderEmail = $2';\r\n      const { rows } = await db.query(findASentMailQuery, [req.params.id, req.user.email]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ message: 'we could not find your mail' });\r\n      }\r\n      return res.status(200).send({ sent: rows[0] });\r\n    } catch (err) {\r\n      return res.status(400).send(err);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * delete a mail from inbox\r\n   * @param { object } req\r\n   * @param { object } res\r\n   * @returns { object } success or error\r\n   */\r\n  async deleteAInbox(req, res) {\r\n    try {\r\n      const deleteAInboxMailQuery = 'DELETE FROM messages WHERE id=$1 AND receiverEmail = $2 RETURNING *';\r\n      const { rows } = await db.query(deleteAInboxMailQuery, [req.params.id, req.user.email]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ message: 'we could not find your mail' });\r\n      }\r\n      return res.send({\r\n        status: 204,\r\n        message: 'deleted',\r\n      });\r\n    } catch (err) {\r\n      return res.status(400).send(err);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * delete a mail from sent\r\n   * @param { object } req\r\n   * @param { object } res\r\n   * @returns { object } success or error\r\n   */\r\n  async deleteASent(req, res) {\r\n    try {\r\n      const deleteASentMailQuery = 'DELETE FROM messages WHERE id=$1 AND senderEmail = $2 RETURNING *';\r\n      const { rows } = await db.query(deleteASentMailQuery, [req.params.id, req.user.email]);\r\n      if (!rows[0]) {\r\n        return res.status(404).send({ message: 'we could not find your mail' });\r\n      }\r\n      return res.send({\r\n        status: 204,\r\n        message: 'deleted',\r\n      });\r\n    } catch (err) {\r\n      return res.status(400).send(err);\r\n    }\r\n  },\r\n};\r\n\r\nexport default MessageController;\r\n"],"file":"MessageController.js"}