{"version":3,"sources":["../../server/controllers/MessageController.js"],"names":["createMessageQuery","findInboxQuery","findAInboxMailQuery","updateStatusQuery","findAllUnreadQuery","findSentQuery","findASentMailQuery","findDraftQuery","findADraftQuery","deleteAInboxMailQuery","deleteASentMailQuery","MessageController","create","req","res","messageStatus","body","receiverEmail","values","Date","user","email","subject","toLowerCase","message","db","query","rows","status","send","data","newsent","mesage","getInbox","rowCount","count","inbox","getAInbox","params","id","getUnread","unread","getSent","sent","getASent","getDrafts","drafts","getADraft","deleteAInbox","mail","deleteASent"],"mappings":"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","sourcesContent":["import uuidv4 from 'uuid/v4';\nimport db from '../db';\n\n/** Queries */\nconst createMessageQuery = `INSERT INTO\n        messages(createdOn, receiverEmail, senderEmail, subject, message, parentMessageId, status)\n        VALUES($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *`;\n\nconst findInboxQuery = 'SELECT * FROM messages WHERE receiverEmail = $1';\nconst findAInboxMailQuery = 'SELECT * FROM messages WHERE id=$1 AND receiverEmail = $2';\nconst updateStatusQuery = 'UPDATE messages SET status=$1 WHERE receiverEmail = $2 RETURNING *';\nconst findAllUnreadQuery = 'SELECT * FROM messages WHERE receiverEmail = $1 AND status = $2';\nconst findSentQuery = 'SELECT * FROM messages WHERE senderEmail = $1';\nconst findASentMailQuery = 'SELECT * FROM messages WHERE id = $1 AND senderEmail = $2';\nconst findDraftQuery = 'SELECT * FROM messages WHERE senderEmail = $1 AND status = $2';\nconst findADraftQuery = 'SELECT * FROM messages WHERE id=$1 AND senderEmail = $2 AND status = $3';\nconst deleteAInboxMailQuery = 'DELETE FROM messages WHERE id=$1 AND receiverEmail = $2 RETURNING *';\nconst deleteASentMailQuery = 'DELETE FROM messages WHERE id=$1 AND senderEmail = $2 RETURNING *';\n\n\n/** End of Queries */\n\nconst MessageController = {\n\n  /**\n   * create a new message\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } message object\n   */\n  async create(req, res) {\n    const messageStatus = (!req.body.receiverEmail) ? 'draft' : 'unread';\n    const values = [\n      new Date(),\n      req.body.receiverEmail,\n      req.user.email,\n      req.body.subject.toLowerCase(),\n      req.body.message,\n      uuidv4(),\n      messageStatus,\n    ];\n\n    try {\n      const { rows } = await db.query(createMessageQuery, values);\n      return res.status(201).send({\n        status: 201,\n        data: [{\n          message: 'Your message has been sent',\n          newsent: rows[0],\n        }],\n      });\n    } catch (error) {\n      return res.status(500).send({\n        mesage: error,\n      });\n    }\n  },\n\n  /**\n   * get inbox for a user\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } inbox array\n   */\n\n  async getInbox(req, res) {\n    try {\n      const { rows, rowCount } = await db.query(findInboxQuery, [req.user.email]);\n      return res.status(200).send({\n        status: 200,\n        count: `You have ${rowCount} messages.`,\n        inbox: rows,\n      });\n    } catch (error) {\n      return res.status(500).send({\n        mesage: error,\n      });\n    }\n  },\n\n  /**\n   * get a user inbox message\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } inbox mail object\n   */\n  async getAInbox(req, res) {\n    try {\n      const { rows } = await db.query(findAInboxMailQuery, [req.params.id, req.user.email]);\n      await db.query(updateStatusQuery, ['read', req.user.email]);\n      return res.status(200).send({\n        status: 200,\n        message: rows,\n      });\n    } catch (error) {\n      return res.status(500).send({\n        mesage: error,\n      });\n    }\n  },\n\n  async getUnread(req, res) {\n    try {\n      const { rows, rowCount } = await db.query(findAllUnreadQuery, [req.user.email, 'unread']);\n      return res.status(200).send({\n        status: 200,\n        count: `You have ${rowCount} unread messages.`,\n        unread: rows,\n      });\n    } catch (error) {\n      return res.status(500).send({\n        mesage: error,\n      });\n    }\n  },\n\n  /**\n   * get all sent mails\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } sent array\n   */\n  async getSent(req, res) {\n    try {\n      const { rows, rowCount } = await db.query(findSentQuery, [req.user.email]);\n      return res.status(200).send({\n        status: 200,\n        count: `You have sent messages ${rowCount}.`,\n        sent: rows,\n      });\n    } catch (error) {\n      return res.status(500).send({\n        mesage: error,\n      });\n    }\n  },\n\n  /**\n   * get a user sent mail\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } sent mail object\n   */\n  async getASent(req, res) {\n    try {\n      const { rows } = await db.query(findASentMailQuery, [req.params.id, req.user.email]);\n      return res.status(200).send({\n        status: 200,\n        message: rows,\n      });\n    } catch (error) {\n      return res.status(500).send({\n        mesage: error,\n      });\n    }\n  },\n\n  /**\n   * get all draft mails\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } sent array\n   */\n  async getDrafts(req, res) {\n    try {\n      const { rows, rowCount } = await db.query(findDraftQuery, [req.user.email, 'draft']);\n      return res.status(200).send({\n        status: 200,\n        count: `You have ${rowCount} drafts.`,\n        drafts: rows,\n      });\n    } catch (error) {\n      return res.status(500).send({\n        mesage: error,\n      });\n    }\n  },\n\n  /**\n   * get a draft\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } success or error\n   */\n  async getADraft(req, res) {\n    try {\n      const { rows } = await db.query(findADraftQuery, [req.params.id, req.user.email, 'draft']);\n      return res.status(200).send({\n        status: 200,\n        message: rows,\n      });\n    } catch (error) {\n      return res.status(500).send({\n        mesage: error,\n      });\n    }\n  },\n\n  /**\n   * delete a mail from inbox\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } success or error\n   */\n  async deleteAInbox(req, res) {\n    try {\n      const { rows } = await db.query(deleteAInboxMailQuery, [req.params.id, req.user.email]);\n      return res.status(204).send({\n        status: 204,\n        message: 'deleted',\n        mail: rows[0],\n      });\n    } catch (error) {\n      return res.status(500).send({\n        mesage: error,\n      });\n    }\n  },\n\n  /**\n   * delete a mail from sent\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } success or error\n   */\n  async deleteASent(req, res) {\n    try {\n      const { rows } = await db.query(deleteASentMailQuery, [req.params.id, req.user.email]);\n      return res.status(204).send({\n        status: 204,\n        message: 'deleted',\n        mail: rows[0],\n      });\n    } catch (error) {\n      return res.status(500).send({\n        mesage: error,\n      });\n    }\n  },\n};\n\nexport default MessageController;\n"],"file":"MessageController.js"}