{"version":3,"sources":["../../server/controllers/MessageController.js"],"names":["MessageController","create","req","res","body","subject","message","status","receiverId","send","user","email","createMessageQuery","values","Date","parentMessageId","db","query","rows","getInbox","findInboxQuery","rowCount","getAInbox","findAInboxMailQuery","params","id","updateStatusQuery","err","getUnread","findAllUnreadQuery","getSent","findSentQuery","getASent","findASentMailQuery","sent","deleteAInbox","deleteAInboxMailQuery","deleteASent","deleteASentMailQuery"],"mappings":"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","file":"MessageController.js","sourcesContent":["import db from '../db';\n\nconst MessageController = {\n\n  /**\n   * create a new message\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } message object\n   */\n  async create(req, res) {\n    if (!req.body.subject || !req.body.message || !req.body.status || !req.body.receiverId) {\n      return res.status(400).send({ message: 'You have one or more empty fields' });\n    }\n    if (req.user.email === req.body.receiverId) {\n      return res.status(400).send({ message: 'You should save as sraft instead' });\n    }\n    if (!req.user) {\n      return res.status(400).send({ message: 'User not logged in' });\n    }\n    const createMessageQuery = `INSERT INTO\n        messages(createdOn, receiverEmail, senderEmail, subject, message, parentMessageId, status)\n        VALUES($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *`;\n    const values = [\n      new Date(),\n      req.body.receiverId,\n      req.user.email,\n      req.body.subject,\n      req.body.message,\n      req.body.parentMessageId,\n      req.body.status,\n    ];\n\n    try {\n      const { rows } = await db.query(createMessageQuery, values);\n      return res.status(201).send(rows[0]);\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n\n  /**\n   * get inbox for a user\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } inbox array\n   */\n\n  async getInbox(req, res) {\n    const findInboxQuery = 'SELECT * FROM messages WHERE receiverEmail = $1';\n    try {\n      if (!req.user.email) {\n        return res.status(403).send({ message: 'Login to your account' });\n      }\n      const { rows, rowCount } = await db.query(findInboxQuery, [req.user.email]);\n      return res.status(200).send({ rows, rowCount });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n\n  /**\n   * get a user inbox message\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } inbox mail object\n   */\n  async getAInbox(req, res) {\n    try {\n      const findAInboxMailQuery = 'SELECT * FROM messages WHERE id=$1 AND receiverEmail = $2';\n      if (!req.user.email) {\n        return res.status(403).send({ message: 'Login to your account' });\n      }\n\n      const { rows } = await db.query(findAInboxMailQuery, [req.params.id, req.user.email]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'we could not find your mail' });\n      }\n      const updateStatusQuery = 'UPDATE messages SET status=$1 WHERE receiverEmail = $2 RETURNING *';\n      await db.query(updateStatusQuery, ['read', req.user.email]);\n      return res.status(200).send({ rows });\n    } catch (err) {\n      return res.status(400).send({ err });\n    }\n  },\n\n  async getUnread(req, res) {\n    try {\n      const findAllUnreadQuery = 'SELECT * FROM messages WHERE receiverEmail = $1 AND status = $2';\n      if (!req.user.email) {\n        return res.status(403).send({ message: 'Login to your account' });\n      }\n      const { rows, rowCount } = await db.query(findAllUnreadQuery, [req.user.email, 'unread']);\n      return res.status(200).send({ rows, rowCount });\n    } catch (err) {\n      return res.status(400).send({ err });\n    }\n  },\n\n  /**\n   * get all sent mails\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } sent array\n   */\n  async getSent(req, res) {\n    try {\n      const findSentQuery = 'SELECT * FROM messages WHERE senderEmail = $1';\n      if (!req.user.email) {\n        return res.status(403).send({ message: 'Login to your account' });\n      }\n      const { rows, rowCount } = await db.query(findSentQuery, [req.user.email]);\n      return res.status(200).send({ rows, rowCount });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n\n  /**\n   * get a user sent mail\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } sent mail object\n   */\n  async getASent(req, res) {\n    try {\n      const findASentMailQuery = 'SELECT * FROM messages WHERE id = $1 AND senderEmail = $2';\n      const { rows } = await db.query(findASentMailQuery, [req.params.id, req.user.email]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'we could not find your mail' });\n      }\n      return res.status(200).send({ sent: rows[0] });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n\n  /**\n   * delete a mail from inbox\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } success or error\n   */\n  async deleteAInbox(req, res) {\n    try {\n      const deleteAInboxMailQuery = 'DELETE FROM messages WHERE id=$1 AND receiverEmail = $2 RETURNING *';\n      const { rows } = await db.query(deleteAInboxMailQuery, [req.params.id, req.user.email]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'we could not find your mail' });\n      }\n      return res.send({\n        status: 204,\n        message: 'deleted',\n      });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n\n  /**\n   * delete a mail from sent\n   * @param { object } req\n   * @param { object } res\n   * @returns { object } success or error\n   */\n  async deleteASent(req, res) {\n    try {\n      const deleteASentMailQuery = 'DELETE FROM messages WHERE id=$1 AND senderEmail = $2 RETURNING *';\n      const { rows } = await db.query(deleteASentMailQuery, [req.params.id, req.user.email]);\n      if (!rows[0]) {\n        return res.status(404).send({ message: 'we could not find your mail' });\n      }\n      return res.send({\n        status: 204,\n        message: 'deleted',\n      });\n    } catch (err) {\n      return res.status(400).send(err);\n    }\n  },\n};\n\nexport default MessageController;\n"]}